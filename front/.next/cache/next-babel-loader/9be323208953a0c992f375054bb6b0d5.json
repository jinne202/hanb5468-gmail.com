{"ast":null,"code":"import { all, fork, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, LOG_IN_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\naxios.defaults.baseURL = 'http://localhost:7070/api';\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', loginData);\n}\n\nfunction* login(action) {\n  try {\n    yield call(loginAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}","map":{"version":3,"sources":["C:/project/nodebird/front/sagas/user.js"],"names":["all","fork","takeEvery","put","delay","call","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","LOG_IN_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","defaults","baseURL","loginAPI","loginData","post","login","action","data","type","e","console","error","watchLogin","signUpAPI","signUpData","signUp","watchSignUp","userSaga"],"mappings":"AAAA,SAASA,GAAT,EAAcC,IAAd,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoCC,KAApC,EAA2CC,IAA3C,QAAuD,oBAAvD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,eAAzC,EAA0DC,cAA1D,EAA0EC,eAA1E,EAA2FC,eAA3F,QAAkH,kBAAlH;AAEAN,KAAK,CAACO,QAAN,CAAeC,OAAf,GAAyB,2BAAzB;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA4B;AACxB;AACA,SAAOV,KAAK,CAACW,IAAN,CAAW,aAAX,EAA0BD,SAA1B,CAAP;AACH;;AAED,UAAUE,KAAV,CAAgBC,MAAhB,EAAuB;AACnB,MAAI;AACA,UAAMd,IAAI,CAACU,QAAD,EAAWI,MAAM,CAACC,IAAlB,CAAV;AACA,UAAMjB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAGd;AADD,KAAD,CAAT;AAGH,GALD,CAKE,OAAOe,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAGb;AADD,KAAD,CAAT;AAGH;AACJ;;AAED,UAAUiB,UAAV,GAAsB;AAClB,QAAMvB,SAAS,CAACQ,cAAD,EAAiBQ,KAAjB,CAAf;AACH;;AAED,SAASQ,SAAT,CAAmBC,UAAnB,EAA8B;AAC1B,SAAOrB,KAAK,CAACW,IAAN,CAAW,QAAX,EAAqBU,UAArB,CAAP;AACH;;AAED,UAAUC,MAAV,CAAiBT,MAAjB,EAAwB;AACpB,MAAI;AACA,UAAMd,IAAI,CAACqB,SAAD,EAAYP,MAAM,CAACC,IAAnB,CAAV;AACA,UAAMjB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAGV;AADD,KAAD,CAAT;AAGH,GALD,CAKE,OAAOW,CAAP,EAAU;AACRC,IAAAA,OAAO,CAACC,KAAR,CAAcF,CAAd;AACA,UAAMnB,GAAG,CAAC;AACNkB,MAAAA,IAAI,EAAGT,eADD;AAENY,MAAAA,KAAK,EAAGF;AAFF,KAAD,CAAT;AAIH;AACJ;;AAED,UAAUO,WAAV,GAAuB;AACnB,QAAM3B,SAAS,CAACO,eAAD,EAAkBmB,MAAlB,CAAf;AACH;;AAED,eAAe,UAAUE,QAAV,GAAoB;AAC/B,QAAM9B,GAAG,CAAE,CACPC,IAAI,CAACwB,UAAD,CADG,EAEPxB,IAAI,CAAC4B,WAAD,CAFG,CAAF,CAAT;AAIH","sourcesContent":["import { all, fork, takeEvery, put, delay, call } from 'redux-saga/effects';\r\nimport axios from 'axios'\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, LOG_IN_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from '../reducers/user';\r\n\r\naxios.defaults.baseURL = 'http://localhost:7070/api';\r\n\r\nfunction loginAPI(loginData){\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/login', loginData);\r\n}\r\n\r\nfunction* login(action){\r\n    try {\r\n        yield call(loginAPI, action.data);\r\n        yield put({\r\n            type : LOG_IN_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction* signUp(action){\r\n    try {\r\n        yield call(signUpAPI, action.data);\r\n        yield put({\r\n            type : SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : SIGN_UP_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all ([\r\n        fork(watchLogin),\r\n        fork(watchSignUp),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}