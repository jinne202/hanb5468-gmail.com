{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    // 펼쳐져있으면 닫고 닫혀있으면 펼치고\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENT_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    style: {\n      margin: '40px 0 0'\n    },\n    key: +post.createdAT,\n    cover: post.Images[0] && __jsx(\"img\", {\n      alt: \"example\",\n      src: `http://localhost:7070/` + post.Images[0].src\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\"\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"follow\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(v => {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: `/hashtag/${v.slice(1)}`,\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} reply`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAT: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/project/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","Link","Card","Icon","Button","Avatar","Form","Input","List","Comment","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","onToggleComment","prev","type","data","id","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","margin","createdAT","Images","src","pathname","query","User","nickname","split","map","v","match","tag","slice","Comments","length","item","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'next/link';\r\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        // 펼쳐져있으면 닫고 닫혀있으면 펼치고\r\n        setCommentFormOpened(prev => !prev);\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type : LOAD_COMMENT_REQUEST,\r\n                data : post.id,\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : ADD_COMMENT_REQUEST,\r\n            data : {\r\n                postId : post.id,\r\n                content : commentText,\r\n            },\r\n        });\r\n    }, [me && me.id, commentText]);\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                style = {{margin : '40px 0 0'}}\r\n                key = {+post.createdAT}\r\n                cover = {post.Images[0] && <img alt=\"example\" src={`http://localhost:7070/` + post.Images[0].src}/>}\r\n                actions = {[\r\n                    <Icon type=\"retweet\" key=\"retweet\"/>,\r\n                    <Icon type=\"heart\" key=\"heart\"/>,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\"/>\r\n                ]}\r\n                extra = {<Button>follow</Button>}\r\n            >\r\n            <Card.Meta\r\n                avatar = {<Link href = {{ pathname : '/user', query : { id : post.User.id } }} as = {`/user/${post.User.id}`}><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                title = {post.User.nickname}\r\n                description = {<div>\r\n                    {post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                        if (v.match(/#[^\\s]+/)){\r\n                            return (\r\n                                <Link\r\n                                    href={{ pathname: '/hashtag', query: { tag: v.slice(1) } }}\r\n                                    as={`/hashtag/${v.slice(1)}`}\r\n                                    key={v}\r\n                                >\r\n                                <a>{v}</a>\r\n                                </Link>\r\n                            );\r\n                        }\r\n                    return v;\r\n                })}</div>}\r\n            />\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading = {isAddingComment}>삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} reply`}\r\n                        itemLayout = \"horizontal\"\r\n                        dataSource = {post.Comments || []}\r\n                        renderItem = {item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author = {item.User.nickname}\r\n                                    avatar = {<Link href = {{ pathname : '/user', query : { id : item.User.id } }} as = {`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                                    content = {item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post : PropTypes.shape({\r\n        User : PropTypes.object,\r\n        content : PropTypes.string,\r\n        img : PropTypes.string,\r\n        createdAT : PropTypes.string,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}