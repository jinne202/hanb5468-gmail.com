{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useEffect, useCallback, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Button, List, Card, Icon } from 'antd';\nimport NicknameEditForm from '../components/NicknameEditForm';\nimport { LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, UNFOLLOW_USER_REQUEST, REMOVE_FOLLOWER_REQUEST } from '../reducers/user';\nimport { LOAD_USER_POST_REQUEST } from '../reducers/post';\nimport PostCard from '../components/PostCard';\n\nvar Profile = function Profile() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me,\n      followingList = _useSelector.followingList,\n      followerList = _useSelector.followerList;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts;\n\n  useEffect(function () {\n    if (me) {\n      dispatch({\n        type: LOAD_FOLLOWERS_REQUEST,\n        data: me.id\n      });\n      dispatch({\n        type: LOAD_FOLLOWINGS_REQUEST,\n        data: me.id\n      });\n      dispatch({\n        type: LOAD_USER_POST_REQUEST,\n        data: me.id\n      });\n    }\n  }, [me && me.id]);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemoveFollower = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: REMOVE_FOLLOWER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  return __jsx(React.Fragment, null, __jsx(\"div\", {\n    style: {\n      margin: '40px 0 0'\n    }\n  }, __jsx(NicknameEditForm, null), __jsx(List, {\n    style: {\n      marginBottom: '20px'\n    },\n    grid: {\n      gutter: 4,\n      xs: 2,\n      md: 3\n    },\n    size: \"small\",\n    header: __jsx(\"div\", null, \" Following List\"),\n    loadMore: __jsx(Button, {\n      style: {\n        width: '100%'\n      }\n    }, \"More\"),\n    bordered: true,\n    dataSource: followingList,\n    renderItem: function renderItem(item) {\n      return __jsx(List.Item, {\n        style: {\n          marginTop: '20px'\n        }\n      }, __jsx(Card, {\n        actions: [__jsx(Icon, {\n          key: \"stop\",\n          type: \"stop\",\n          onClick: onUnfollow(item.id)\n        })]\n      }, __jsx(Card.Meta, {\n        description: item.nickname\n      })));\n    }\n  }), __jsx(List, {\n    style: {\n      marginBottom: '20px'\n    },\n    grid: {\n      gutter: 4,\n      xs: 2,\n      md: 3\n    },\n    size: \"small\",\n    header: __jsx(\"div\", null, \" Follower List\"),\n    loadMore: __jsx(Button, {\n      style: {\n        width: '100%'\n      }\n    }, \"More\"),\n    bordered: true,\n    dataSource: followerList,\n    renderItem: function renderItem(item) {\n      return __jsx(List.Item, {\n        style: {\n          marginTop: '20px'\n        }\n      }, __jsx(Card, {\n        actions: [__jsx(Icon, {\n          key: \"stop\",\n          type: \"stop\",\n          onClick: onRemoveFollower(item.id)\n        })]\n      }, __jsx(Card.Meta, {\n        description: item.nickname\n      })));\n    }\n  }), __jsx(\"div\", null, mainPosts.map(function (c) {\n    return __jsx(PostCard, {\n      key: +c.createdAt,\n      post: c\n    });\n  }))));\n};\n\nexport default Profile;","map":{"version":3,"sources":["C:/project/nodebird/front/pages/profile.js"],"names":["React","useEffect","useCallback","useState","useDispatch","useSelector","Button","List","Card","Icon","NicknameEditForm","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWINGS_REQUEST","UNFOLLOW_USER_REQUEST","REMOVE_FOLLOWER_REQUEST","LOAD_USER_POST_REQUEST","PostCard","Profile","dispatch","state","user","me","followingList","followerList","post","mainPosts","type","data","id","onUnfollow","userId","onRemoveFollower","margin","marginBottom","gutter","xs","md","width","item","marginTop","nickname","map","c","createdAt"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { Button, List, Card, Icon } from 'antd';\r\nimport NicknameEditForm from '../components/NicknameEditForm';\r\nimport { LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWINGS_REQUEST, UNFOLLOW_USER_REQUEST, REMOVE_FOLLOWER_REQUEST } from '../reducers/user';\r\nimport { LOAD_USER_POST_REQUEST } from '../reducers/post';\r\nimport PostCard from '../components/PostCard';\r\n\r\nconst Profile = () => {\r\n    const dispatch = useDispatch();\r\n    const { me, followingList, followerList } = useSelector(state => state.user);\r\n    const { mainPosts } = useSelector(state => state.post);\r\n\r\n    useEffect(() => {\r\n        if (me) {\r\n            dispatch({\r\n                type : LOAD_FOLLOWERS_REQUEST,\r\n                data : me.id,\r\n            });\r\n            dispatch({\r\n                type : LOAD_FOLLOWINGS_REQUEST,\r\n                data : me.id,\r\n            });\r\n            dispatch({\r\n                type : LOAD_USER_POST_REQUEST,\r\n                data : me.id,\r\n            });\r\n        }\r\n    }, [me && me.id]);\r\n\r\n    const onUnfollow = useCallback(userId => () => {\r\n        dispatch({\r\n            type : UNFOLLOW_USER_REQUEST,\r\n            data : userId,\r\n        });\r\n    }, []);\r\n\r\n    const onRemoveFollower = useCallback(userId => () => {\r\n        dispatch({\r\n            type : REMOVE_FOLLOWER_REQUEST,\r\n            data : userId,\r\n        });\r\n    }, []);\r\n\r\n    return(\r\n        <>\r\n            <div style = {{margin : '40px 0 0'}}>\r\n                <NicknameEditForm/>\r\n                <List\r\n                    style = {{marginBottom : '20px'}}\r\n                    grid = {{gutter : 4, xs : 2, md : 3}}\r\n                    size = \"small\"\r\n                    header = {<div> Following List</div>}\r\n                    loadMore = {<Button style={{width : '100%'}}>More</Button>}\r\n                    bordered\r\n                    dataSource = {followingList}\r\n                    renderItem = {item => (\r\n                        <List.Item style = {{marginTop : '20px'}}>\r\n                            <Card actions = {[<Icon key=\"stop\" type=\"stop\" onClick={onUnfollow(item.id)} />]}>\r\n                                <Card.Meta description={item.nickname}/>\r\n                            </Card>\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n                <List\r\n                    style = {{marginBottom : '20px'}}\r\n                    grid = {{gutter : 4, xs : 2, md : 3}}\r\n                    size = \"small\"\r\n                    header = {<div> Follower List</div>}\r\n                    loadMore = {<Button style={{width : '100%'}}>More</Button>}\r\n                    bordered\r\n                    dataSource = {followerList}\r\n                    renderItem = {item => (\r\n                        <List.Item style = {{marginTop : '20px'}}>\r\n                            <Card actions = {[<Icon key=\"stop\" type=\"stop\" onClick={onRemoveFollower(item.id)} />]}>\r\n                                <Card.Meta description={item.nickname}/>\r\n                            </Card>\r\n                        </List.Item>\r\n                    )}\r\n                />\r\n                <div>\r\n                    {mainPosts.map(c => (\r\n                        <PostCard key={+c.createdAt} post={c} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default Profile;"]},"metadata":{},"sourceType":"module"}