{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGE_REQUEST } from '../reducers/post';\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var imageInput = useRef();\n  useEffect(function () {\n    if (postAdded) {\n      setText('');\n    }\n  }, [postAdded]);\n  var onSubmitForm = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요.');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (i) {\n      formData.append('image', i);\n    });\n    formData.append('content', text);\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onChangeImage = useCallback(function (e) {\n    console.log(e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGE_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  return __jsx(Form, {\n    style: {\n      margin: '40px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onSubmit: onSumbitForm\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"HOW ARE YOU TODAY?\",\n    value: text,\n    onChange: onChangeText\n  }), __jsx(\"div\", null, __jsx(Input, {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImage\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      \"float\": \"right\"\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"TWIT!\")), __jsx(\"div\", null, imagePaths.map(function (v, i) {\n    return __jsx(\"div\", {\n      key: v,\n      style: {\n        display: 'inline-block'\n      }\n    }, __jsx(\"img\", {\n      src: \"http://localhost : 3000/\".concat(v),\n      stype: {\n        width: '200px'\n      },\n      alt: v\n    }), __jsx(\"div\", null, __jsx(Button, null, \"REMOVE\")));\n  })));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/project/nodebird/front/components/PostForm.js"],"names":["React","useState","useCallback","useEffect","useRef","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGE_REQUEST","PostForm","dispatch","text","setText","state","post","imagePaths","isAddingPost","postAdded","imageInput","onSubmitForm","e","preventDefault","trim","alert","formData","FormData","forEach","i","append","type","data","onChangeText","target","value","onChangeImage","console","log","files","imageFormData","call","f","onClickImageUpload","current","click","margin","onSumbitForm","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGE_REQUEST } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const imageInput = useRef();\r\n\r\n  useEffect(() => {\r\n    if (postAdded) {\r\n      setText('');\r\n    }\r\n  }, [postAdded]);\r\n\r\n  const onSubmitForm = useCallback((e) => {\r\n    e.preventDefault();\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 작성하세요.');\r\n    }\r\n    const formData = new FormData();\r\n    imagePaths.forEach((i) => {\r\n      formData.append('image', i);\r\n    });\r\n    formData.append('content', text);\r\n    dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    });\r\n  }, [text, imagePaths]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n\r\n  const onChangeImage = useCallback((e) => {\r\n    console.log(e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGE_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  return (\r\n      <Form style={{margin : '40px 0 20px'}} encType = \"multipart/form-data\" onSubmit = {onSumbitForm}>\r\n          <Input.TextArea maxLength = {140} placeholder = \"HOW ARE YOU TODAY?\" value = {text} onChange = {onChangeText}/>\r\n          <div>\r\n            <Input type = \"file\" multiple hidden ref = {imageInput} onChange = {onChangeImage} />\r\n            <Button onClick = {onClickImageUpload}>이미지 업로드</Button>\r\n            <Button type = \"primary\" style = {{ float : \"right\" }} htmlType = \"submit\" loading = {isAddingPost}>TWIT!</Button>\r\n          </div>\r\n          <div>\r\n            {imagePaths.map((v, i) => {\r\n              return (\r\n                <div key = {v} style = {{display : 'inline-block'}}>\r\n                  <img src={`http://localhost : 3000/${v}`} stype={{width : '200px'}} alt = {v}/>\r\n                  <div>\r\n                    <Button>REMOVE</Button>\r\n                  </div>\r\n                </div>\r\n              )\r\n            })}\r\n          </div>\r\n      </Form>\r\n  )\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}