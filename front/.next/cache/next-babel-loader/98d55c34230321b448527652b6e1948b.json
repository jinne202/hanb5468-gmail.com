{"ast":null,"code":"import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects';\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POST_SUCCESS, LOAD_MAIN_POST_FAILURE, LOAD_MAIN_POST_REQUEST } from '../reducers/post';\nimport axios from 'axios';\n\nfunction addPostAPI(postData) {\n  return axios.post('/post', postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost() {\n  try {\n    const result = yield call(addPostAPI);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction loadMainPostsAPI() {\n  return axios.get('/posts');\n}\n\nfunction* loadMainPosts(action) {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_MAIN_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POST_REQUEST, loadMainPosts);\n}\n\nfunction addCommentAPI() {}\n\nfunction* addComment(action) {\n  try {\n    //yield call(signUpAPI);\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost), fork(watchLoadMainPosts), fork(watchAddComment)]);\n}","map":{"version":3,"sources":["C:/project/nodebird/front/sagas/post.js"],"names":["all","fork","takeLatest","delay","put","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POST_SUCCESS","LOAD_MAIN_POST_FAILURE","LOAD_MAIN_POST_REQUEST","axios","addPostAPI","postData","post","withCredentials","addPost","result","type","data","e","console","error","watchAddPost","loadMainPostsAPI","get","loadMainPosts","action","watchLoadMainPosts","addCommentAPI","addComment","postId","watchAddComment","postSaga"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, delay, put, call } from 'redux-saga/effects'\r\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POST_SUCCESS, LOAD_MAIN_POST_FAILURE, LOAD_MAIN_POST_REQUEST } from '../reducers/post';\r\nimport axios from 'axios';\r\n\r\nfunction addPostAPI(postData){\r\n    return axios.post('/post', postData, {\r\n        withCredentials : true,\r\n    })\r\n}\r\n\r\nfunction* addPost(){\r\n    try {\r\n        const result = yield call(addPostAPI);\r\n        yield put({\r\n            type : ADD_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : ADD_POST_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST, addPost);\r\n}\r\n\r\nfunction loadMainPostsAPI(){\r\n    return axios.get('/posts');\r\n}\r\n\r\nfunction* loadMainPosts(action){\r\n    try {\r\n        const result = yield call(loadMainPostsAPI);\r\n        yield put({\r\n            type : LOAD_MAIN_POST_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LOAD_MAIN_POST_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadMainPosts(){\r\n    yield takeLatest(LOAD_MAIN_POST_REQUEST, loadMainPosts);\r\n}\r\n\r\nfunction addCommentAPI(){\r\n\r\n}\r\n\r\nfunction* addComment(action){\r\n    try {\r\n        //yield call(signUpAPI);\r\n        yield delay(2000);\r\n        yield put({\r\n            type : ADD_COMMENT_SUCCESS,\r\n            data : {\r\n                postId : action.data.postId,\r\n            },\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : ADD_COMMENT_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nexport default function* postSaga(){\r\n    yield all ([\r\n        fork(watchAddPost),\r\n        fork(watchLoadMainPosts),\r\n        fork(watchAddComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}