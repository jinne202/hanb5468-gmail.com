{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport AppLayout from '../components/AppLayout';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return (// provider이 가장 최상위 부모라 그 아래 자식들이 provider에 접근할 수 있음\n    __jsx(Provider, {\n      store: store\n    }, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.9/antd.css\"\n    })), __jsx(AppLayout, null, __jsx(Component, pageProps)))\n  );\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType,\n  store: PropTypes.object,\n  pageProps: PropTypes.object.isRequired\n}; // next에서 실행시켜주는 부분\n\nNodeBird.getInitialProps = async context => {\n  console.log(context);\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n}; // 고차 컴포넌트라고 부름 기존 component의 기능을 확장해준다. withRedux라는게 Nodebird component에 props로 store을 넣어주는 역할을 한다. 그 store을 어떻게 넣어줄지를 적어야 함\n// 그냥 외우는게 좋다 어차피 모든 프로젝트에 다 똑같이 쓰인다\n\n\nexport default withRedux((initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware(); // 넣고싶은 미들웨어는 [] 여기 안에다가\n\n  const middlewares = [sagaMiddleware]; // 리덕스의 기능을 향상시키다 middleware을 apply해서!\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), // typeof window !== 'undefined' 은 !options.isServer랑 같다\n  // __REDUX_DEVTOOLS_EXTENSION__ 이거는 배포할때는 거의 뺀다 redux가 어떻게 돌아가는지 노출되어버림\n  !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga); // 이 부분은 별로 바뀔 일이 없다 연결하는 부분!\n\n  return store;\n})(NodeBird);","map":{"version":3,"sources":["C:/project/nodebird/front/pages/_app.js"],"names":["React","Head","PropTypes","AppLayout","Provider","createStore","compose","applyMiddleware","createSagaMiddleware","withRedux","reducer","rootSaga","NodeBird","Component","store","pageProps","propTypes","elementType","object","isRequired","getInitialProps","context","console","log","ctx","initialState","options","sagaMiddleware","middlewares","enhancer","isServer","window","__REDUX_DEVTOOLS_EXTENSION__","f","run"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,WAAT,EAAsBC,OAAtB,EAA+BC,eAA/B,QAAsD,OAAtD;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,OAAOC,SAAP,MAAsB,oBAAtB;AACA,OAAOC,OAAP,MAAoB,aAApB;AACA,OAAOC,QAAP,MAAqB,UAArB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,KAAb;AAAoBC,EAAAA;AAApB,CAAD,KAAqC;AAClD,SACI;AACA,UAAC,QAAD;AAAU,MAAA,KAAK,EAAID;AAAnB,OACI,MAAC,IAAD,QACI,gCADJ,EAEI;AAAM,MAAA,GAAG,EAAC,YAAV;AAAuB,MAAA,IAAI,EAAC;AAA5B,MAFJ,CADJ,EAKI,MAAC,SAAD,QACI,MAAC,SAAD,EAAeC,SAAf,CADJ,CALJ;AAFJ;AAYH,CAbD;;AAgBAH,QAAQ,CAACI,SAAT,GAAqB;AACjBH,EAAAA,SAAS,EAAGX,SAAS,CAACe,WADL;AAEjBH,EAAAA,KAAK,EAAGZ,SAAS,CAACgB,MAFD;AAGjBH,EAAAA,SAAS,EAAEb,SAAS,CAACgB,MAAV,CAAiBC;AAHX,CAArB,C,CAMA;;AACAP,QAAQ,CAACQ,eAAT,GAA2B,MAAOC,OAAP,IAAmB;AAC1CC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,QAAM;AAAEG,IAAAA,GAAF;AAAOX,IAAAA;AAAP,MAAqBQ,OAA3B;AACA,MAAIN,SAAS,GAAG,EAAhB;;AACA,MAAIF,SAAS,CAACO,eAAd,EAA+B;AAC3BL,IAAAA,SAAS,GAAG,MAAMF,SAAS,CAACO,eAAV,CAA0BI,GAA1B,CAAlB;AACH;;AACD,SAAO;AAAET,IAAAA;AAAF,GAAP;AACH,CARD,C,CAUA;AACA;;;AACA,eAAeN,SAAS,CAAC,CAACgB,YAAD,EAAeC,OAAf,KAA2B;AAChD,QAAMC,cAAc,GAAGnB,oBAAoB,EAA3C,CADgD,CAEhD;;AACA,QAAMoB,WAAW,GAAG,CAACD,cAAD,CAApB,CAHgD,CAIhD;;AACA,QAAME,QAAQ,GAAG,QACfvB,OAAO,CACLC,eAAe,CAAC,GAAGqB,WAAJ,CADV,CADQ,GAIftB,OAAO,CACLC,eAAe,CAAC,GAAGqB,WAAJ,CADV,EAEL;AACA;AACA,GAACF,OAAO,CAACI,QAAT,IAAqBC,MAAM,CAACC,4BAAP,KAAwC,WAA7D,GAA2ED,MAAM,CAACC,4BAAP,EAA3E,GAAoHC,CAAD,IAAOA,CAJrH,CAJT;AAUA,QAAMnB,KAAK,GAAGT,WAAW,CAACK,OAAD,EAAUe,YAAV,EAAwBI,QAAxB,CAAzB;AACAF,EAAAA,cAAc,CAACO,GAAf,CAAmBvB,QAAnB,EAhBgD,CAiBhD;;AACA,SAAOG,KAAP;AACH,CAnBuB,CAAT,CAmBZF,QAnBY,CAAf","sourcesContent":["import React from 'react';\r\nimport Head from 'next/head';\r\nimport PropTypes from 'prop-types';\r\nimport AppLayout from '../components/AppLayout';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, compose, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport withRedux from 'next-redux-wrapper';\r\nimport reducer from '../reducers';\r\nimport rootSaga from '../sagas';\r\n\r\nconst NodeBird = ({ Component, store, pageProps }) => {\r\n    return (\r\n        // provider이 가장 최상위 부모라 그 아래 자식들이 provider에 접근할 수 있음\r\n        <Provider store = {store}>\r\n            <Head>\r\n                <title>NodeBird</title>\r\n                <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.9/antd.css\"/>\r\n            </Head>\r\n            <AppLayout>\r\n                <Component {...pageProps} />\r\n            </AppLayout>\r\n        </Provider>\r\n    )\r\n};\r\n\r\n\r\nNodeBird.propTypes = {\r\n    Component : PropTypes.elementType,\r\n    store : PropTypes.object,\r\n    pageProps: PropTypes.object.isRequired,\r\n};\r\n\r\n// next에서 실행시켜주는 부분\r\nNodeBird.getInitialProps = async (context) => {\r\n    console.log(context);\r\n    const { ctx, Component } = context;\r\n    let pageProps = {};\r\n    if (Component.getInitialProps) {\r\n        pageProps = await Component.getInitialProps(ctx);\r\n    }\r\n    return { pageProps };\r\n};\r\n\r\n// 고차 컴포넌트라고 부름 기존 component의 기능을 확장해준다. withRedux라는게 Nodebird component에 props로 store을 넣어주는 역할을 한다. 그 store을 어떻게 넣어줄지를 적어야 함\r\n// 그냥 외우는게 좋다 어차피 모든 프로젝트에 다 똑같이 쓰인다\r\nexport default withRedux((initialState, options) => {\r\n    const sagaMiddleware = createSagaMiddleware();\r\n    // 넣고싶은 미들웨어는 [] 여기 안에다가\r\n    const middlewares = [sagaMiddleware];\r\n    // 리덕스의 기능을 향상시키다 middleware을 apply해서!\r\n    const enhancer = process.env.NODE_ENV === 'production'\r\n    ? compose(\r\n        applyMiddleware(...middlewares)\r\n    )\r\n    : compose(\r\n        applyMiddleware(...middlewares),\r\n        // typeof window !== 'undefined' 은 !options.isServer랑 같다\r\n        // __REDUX_DEVTOOLS_EXTENSION__ 이거는 배포할때는 거의 뺀다 redux가 어떻게 돌아가는지 노출되어버림\r\n        !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : (f) => f,\r\n    )\r\n    const store = createStore(reducer, initialState, enhancer);\r\n    sagaMiddleware.run(rootSaga);\r\n    // 이 부분은 별로 바뀔 일이 없다 연결하는 부분!\r\n    return store;\r\n})(NodeBird);"]},"metadata":{},"sourceType":"module"}