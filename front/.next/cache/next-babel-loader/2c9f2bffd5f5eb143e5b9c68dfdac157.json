{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\nodebird\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST } from '../reducers/post';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const onToggleComment = useCallback(() => {\n    // 펼쳐져있으면 닫고 닫혀있으면 펼치고\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENT_REQUEST,\n        data: {\n          postId: post.id\n        }\n      });\n    }\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(Card, {\n    style: {\n      margin: '40px 0 0'\n    },\n    key: +post.createdAT,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, \"follow\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} reply`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, __jsx(Comment, {\n      author: item.User.nickname // avatar = {<Link href = {{ pathname : '/user', query : { id : item.User.id } }} as = {`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\n      ,\n      avatar: __jsx(Avatar, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, item.User.nickname[0]),\n      content: item.content,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAT: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/project/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","Card","Icon","Button","Avatar","Form","Input","List","Comment","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","onToggleComment","prev","type","data","postId","id","onSubmitComment","e","preventDefault","alert","content","onChangeCommentText","target","value","margin","createdAT","img","User","nickname","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        // 펼쳐져있으면 닫고 닫혀있으면 펼치고\r\n        setCommentFormOpened(prev => !prev);\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type : LOAD_COMMENT_REQUEST,\r\n                data : {\r\n                    postId : post.id,\r\n                }\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : ADD_COMMENT_REQUEST,\r\n            data : {\r\n                postId : post.id,\r\n                content : commentText,\r\n            },\r\n        });\r\n    }, [me && me.id, commentText]);\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                style = {{margin : '40px 0 0'}}\r\n                key = {+post.createdAT}\r\n                cover = {post.img && <img alt=\"example\" src={post.img}/>}\r\n                actions = {[\r\n                    <Icon type=\"retweet\" key=\"retweet\"/>,\r\n                    <Icon type=\"heart\" key=\"heart\"/>,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\"/>\r\n                ]}\r\n                extra = {<Button>follow</Button>}\r\n            >\r\n            <Card.Meta\r\n                avatar = {<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title = {post.User.nickname}\r\n                description = {post.content}\r\n            />\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} reply`}\r\n                        itemLayout = \"horizontal\"\r\n                        dataSource = {post.Comments || []}\r\n                        renderItem = {item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author = {item.User.nickname}\r\n                                    // avatar = {<Link href = {{ pathname : '/user', query : { id : item.User.id } }} as = {`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                                    avatar = {<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content = {item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post : PropTypes.shape({\r\n        User : PropTypes.object,\r\n        content : PropTypes.string,\r\n        img : PropTypes.string,\r\n        createdAT : PropTypes.string,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}