{"ast":null,"code":"var __jsx = React.createElement;\nimport React from 'react';\nimport Head from 'next/head';\nimport PropTypes from 'prop-types';\nimport AppLayout from '../components/AppLayout';\nimport { Provider } from 'react-redux';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport withRedux from 'next-redux-wrapper';\nimport reducer from '../reducers';\nimport rootSaga from '../sagas';\n\nconst NodeBird = ({\n  Component,\n  store,\n  pageProps\n}) => {\n  return (// provider이 가장 최상위 부모라 그 아래 자식들이 provider에 접근할 수 있음\n    __jsx(Provider, {\n      store: store\n    }, __jsx(Head, null, __jsx(\"title\", null, \"NodeBird\"), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/antd/3.26.9/antd.css\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      type: \"text/css\",\n      charset: \"UTF-8\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\n    }), __jsx(\"link\", {\n      rel: \"stylesheet\",\n      type: \"text/css\",\n      href: \"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\n    })), __jsx(AppLayout, null, __jsx(Component, pageProps)))\n  );\n};\n\nNodeBird.propTypes = {\n  Component: PropTypes.elementType,\n  store: PropTypes.object,\n  pageProps: PropTypes.object.isRequired\n}; // next에서 실행시켜주는 부분\n\nNodeBird.getInitialProps = async context => {\n  console.log(context);\n  const {\n    ctx,\n    Component\n  } = context;\n  let pageProps = {};\n\n  if (Component.getInitialProps) {\n    pageProps = await Component.getInitialProps(ctx);\n  }\n\n  return {\n    pageProps\n  };\n}; // 고차 컴포넌트라고 부름 기존 component의 기능을 확장해준다. withRedux라는게 Nodebird component에 props로 store을 넣어주는 역할을 한다. 그 store을 어떻게 넣어줄지를 적어야 함\n// 그냥 외우는게 좋다 어차피 모든 프로젝트에 다 똑같이 쓰인다\n\n\nexport default withRedux((initialState, options) => {\n  const sagaMiddleware = createSagaMiddleware(); // 넣고싶은 미들웨어는 [] 여기 안에다가\n\n  const middlewares = [sagaMiddleware]; // 리덕스의 기능을 향상시키다 middleware을 apply해서!\n\n  const enhancer = false ? compose(applyMiddleware(...middlewares)) : compose(applyMiddleware(...middlewares), // typeof window !== 'undefined' 은 !options.isServer랑 같다\n  // __REDUX_DEVTOOLS_EXTENSION__ 이거는 배포할때는 거의 뺀다 redux가 어떻게 돌아가는지 노출되어버림\n  !options.isServer && window.__REDUX_DEVTOOLS_EXTENSION__ !== 'undefined' ? window.__REDUX_DEVTOOLS_EXTENSION__() : f => f);\n  const store = createStore(reducer, initialState, enhancer);\n  sagaMiddleware.run(rootSaga); // 이 부분은 별로 바뀔 일이 없다 연결하는 부분!\n\n  return store;\n})(NodeBird);","map":null,"metadata":{},"sourceType":"module"}