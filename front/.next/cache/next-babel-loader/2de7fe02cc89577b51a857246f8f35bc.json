{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGE_REQUEST } from '../reducers/post';\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const {\n    0: text,\n    1: setText\n  } = useState('');\n  const {\n    imagePaths,\n    isAddingPost,\n    postAdded\n  } = useSelector(state => state.post);\n  const imageInput = useRef();\n  useEffect(() => {\n    if (postAdded) {\n      setText('');\n    }\n  }, [postAdded === true]);\n  const onSumbitForm = useCallback(e => {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert('게시글을 작성하세요');\n    }\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        content: text\n      }\n    });\n  }, [text]);\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []); // ajax 사용해서 form data 전송\n\n  const onChangeImage = useCallback(e => {\n    console.log(e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGE_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  return __jsx(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onSubmit: onSubmitForm\n  }, __jsx(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"\\uC5B4\\uB5A4 \\uC2E0\\uAE30\\uD55C \\uC77C\\uC774 \\uC788\\uC5C8\\uB098\\uC694?\",\n    value: text,\n    onChange: onChangeText\n  }), __jsx(\"div\", null, __jsx(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), __jsx(Button, {\n    onClick: onClickImageUpload\n  }, \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"), __jsx(Button, {\n    type: \"primary\",\n    style: {\n      float: 'right'\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"\\uC9F9\\uC9F9\")), __jsx(\"div\", null, imagePaths.map((v, i) => __jsx(\"div\", {\n    key: v,\n    style: {\n      display: 'inline-block'\n    }\n  }, __jsx(\"img\", {\n    src: `http://localhost:3065/${v}`,\n    style: {\n      width: '200px'\n    },\n    alt: v\n  }), __jsx(\"div\", null)))));\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/project/nodebird/front/components/PostForm.js"],"names":["React","useState","useCallback","useEffect","useRef","Form","Input","Button","useSelector","useDispatch","ADD_POST_REQUEST","UPLOAD_IMAGE_REQUEST","PostForm","dispatch","text","setText","imagePaths","isAddingPost","postAdded","state","post","imageInput","onSumbitForm","e","preventDefault","trim","alert","type","data","content","onChangeText","target","value","onChangeImage","console","log","files","imageFormData","FormData","forEach","call","f","append","onClickImageUpload","current","click","margin","onSubmitForm","onChangeImages","float","map","v","i","display","width"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect, useRef } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGE_REQUEST } from '../reducers/post';\r\n\r\nconst PostForm = () => {\r\n  const dispatch = useDispatch();\r\n  const [text, setText] = useState('');\r\n  const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\r\n  const imageInput = useRef();\r\n\r\n  useEffect(() => {\r\n    if (postAdded) {\r\n      setText('');\r\n    }\r\n  }, [postAdded === true]);\r\n\r\n  const onSumbitForm = useCallback((e) => {\r\n    e.preventDefault();\r\n    if(!text || !text.trim()){\r\n      return alert('게시글을 작성하세요');\r\n    }\r\n    dispatch({\r\n      type : ADD_POST_REQUEST,\r\n      data : {\r\n        content : text,\r\n      }\r\n    })\r\n  }, [text]);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n  \r\n  // ajax 사용해서 form data 전송\r\n  const onChangeImage = useCallback((e) => {\r\n    console.log(e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type : UPLOAD_IMAGE_REQUEST,\r\n      data : imageFormData,\r\n    })\r\n  }, []);\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\r\n    <Input.TextArea maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" value={text} onChange={onChangeText} />\r\n    <div>\r\n      <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n      <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n      <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\" loading={isAddingPost}>짹짹</Button>\r\n    </div>\r\n    <div>\r\n      {imagePaths.map((v, i) => (\r\n        <div key={v} style={{ display: 'inline-block' }}>\r\n          <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n          <div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  </Form>\r\n  )\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}