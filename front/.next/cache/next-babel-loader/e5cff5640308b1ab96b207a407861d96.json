{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    // 펼쳐져있으면 닫고 닫혀있으면 펼치고\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENT_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    } // likers 안에 좋아요 누른 사람들의 배열이 들어있음\n\n\n    if (liked) {\n      //좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      //좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    style: {\n      margin: '40px 0 0'\n    },\n    key: +post.createdAT // cover = {post.Images[0] && <img alt=\"example\" src={`http://localhost:7070/` + post.Images[0].src}/>}\n    ,\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: __jsx(Button, null, \"follow\")\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return __jsx(Link, {\n          href: {\n            pathname: '/hashtag',\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: \"/hashtag/\".concat(v.slice(1)),\n          key: v\n        }, __jsx(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" reply\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", null, __jsx(Comment, {\n        author: item.User.nickname,\n        avatar: __jsx(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAT: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/project/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","Link","Card","Icon","Button","Avatar","Form","Input","List","Comment","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENT_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","PostImages","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","margin","createdAT","Images","pathname","query","User","nickname","split","map","match","tag","slice","Comments","length","item","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'next/link';\r\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport PostImages from './PostImages';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        // 펼쳐져있으면 닫고 닫혀있으면 펼치고\r\n        setCommentFormOpened(prev => !prev);\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type : LOAD_COMMENT_REQUEST,\r\n                data : post.id,\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : ADD_COMMENT_REQUEST,\r\n            data : {\r\n                postId : post.id,\r\n                content : commentText,\r\n            },\r\n        });\r\n    }, [me && me.id, commentText]);\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    const onToggleLike = useCallback(()=> {\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        // likers 안에 좋아요 누른 사람들의 배열이 들어있음\r\n        if (liked) { //좋아요 누른 상태\r\n            dispatch({\r\n                type : UNLIKE_POST_REQUEST,\r\n                data : post.id\r\n            })\r\n        } else { //좋아요 안 누른 상태\r\n            dispatch({\r\n                type : LIKE_POST_REQUEST,\r\n                data : post.id\r\n            })\r\n        }\r\n    }, [me && me.id, post && post.id, liked]);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if(!me){\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : RETWEET_REQUEST,\r\n            data : post.id,\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                style = {{margin : '40px 0 0'}}\r\n                key = {+post.createdAT}\r\n                // cover = {post.Images[0] && <img alt=\"example\" src={`http://localhost:7070/` + post.Images[0].src}/>}\r\n                cover = {post.Images[0] && <PostImages images={post.Images} />}\r\n                actions = {[\r\n                    <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet}/>,\r\n                    <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor=\"#eb2f96\" onClick={onToggleLike}/>,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\"/>\r\n                ]}\r\n                extra = {<Button>follow</Button>}\r\n            >\r\n            <Card.Meta\r\n                avatar = {<Link href = {{ pathname : '/user', query : { id : post.User.id } }} as = {`/user/${post.User.id}`}><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                title = {post.User.nickname}\r\n                description = {<div>\r\n                    {post.content.split(/(#[^\\s]+)/g).map((v) => {\r\n                        if (v.match(/#[^\\s]+/)){\r\n                            return (\r\n                                <Link\r\n                                    href={{ pathname: '/hashtag', query: { tag: v.slice(1) } }}\r\n                                    as={`/hashtag/${v.slice(1)}`}\r\n                                    key={v}\r\n                                >\r\n                                <a>{v}</a>\r\n                                </Link>\r\n                            );\r\n                        }\r\n                    return v;\r\n                })}</div>}\r\n            />\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading = {isAddingComment}>삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} reply`}\r\n                        itemLayout = \"horizontal\"\r\n                        dataSource = {post.Comments || []}\r\n                        renderItem = {item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author = {item.User.nickname}\r\n                                    avatar = {<Link href = {{ pathname : '/user', query : { id : item.User.id } }} as = {`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                                    content = {item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post : PropTypes.shape({\r\n        User : PropTypes.object,\r\n        content : PropTypes.string,\r\n        img : PropTypes.string,\r\n        createdAT : PropTypes.string,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}