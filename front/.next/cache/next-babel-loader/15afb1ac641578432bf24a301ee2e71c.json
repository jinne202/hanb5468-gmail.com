{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\n// const dummyUser = {\n//     id : 1,\n//     nickname : 'JINNE',\n//     Post : [],\n//     Followings : [],\n//     Followers : [],\n// }\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다.\nexport const initialState = {\n  isLoggingOut: false,\n  //로그아웃 시도중\n  isLoggingIn: false,\n  //로그인 시도중\n  logInErrorReason: '',\n  //로그인 에러 사유\n  isSignedUp: false,\n  //회원가입 성공\n  isSigningUp: false,\n  //회원가입 시도중\n  signUpErrorReason: '',\n  //회원가입 실패 사유\n  me: null,\n  //내 정보\n  followingList: [],\n  //팔로잉 리스트\n  followerList: [],\n  //팔로워 리스트\n  userInfo: null //남의 정보\n\n}; // 여기까지 store\n\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; //액션의 이름\n\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; // 팔로워, 팔로잉 목록 불러오기\n\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE'; // 팔로우 하는 액션\n\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE'; // 중요한 액션!!!!! 리듀서의 단점때문에 만들어진 액션\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'; // // 실제 액션\n// export const loginRequestAction = {\n//     type : LOG_IN_REQUEST,\n// };\n// export const logoutAction = {\n//     type : LOG_OUT_REQUEST,\n// }\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoadng: true,\n          isLoggingIn: true\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoadng: false,\n          me: action.data,\n          isLoggingIn: false\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoadng: false,\n          isLoggingIn: false,\n          logInErrorReason: action.error,\n          me: null\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: true\n        });\n      }\n\n    case LOG_OUT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: false,\n          me: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: true,\n          isSignedUp: false\n        });\n      }\n\n    case SIGN_UP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          isSignedUp: true\n        });\n      }\n\n    case SIGN_UP_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          signUpErrorReason: action.error\n        });\n      }\n\n    case LOAD_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_USER_SUCCESS:\n      {\n        if (action.me) {\n          return _objectSpread({}, state, {\n            me: action.data\n          });\n        }\n\n        return _objectSpread({}, state, {\n          userInfo: action.data\n        });\n      }\n\n    case LOAD_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/project/nodebird/front/reducers/user.js"],"names":["initialState","isLoggingOut","isLoggingIn","logInErrorReason","isSignedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","reducer","state","action","type","isLoadng","data","error"],"mappings":";;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,YAAY,EAAG,KADS;AACF;AACtBC,EAAAA,WAAW,EAAG,KAFU;AAEH;AACrBC,EAAAA,gBAAgB,EAAG,EAHK;AAGD;AACvBC,EAAAA,UAAU,EAAG,KAJW;AAIJ;AACpBC,EAAAA,WAAW,EAAG,KALU;AAKH;AACrBC,EAAAA,iBAAiB,EAAG,EANI;AAMA;AACxBC,EAAAA,EAAE,EAAG,IAPmB;AAOb;AACXC,EAAAA,aAAa,EAAG,EARQ;AAQJ;AACpBC,EAAAA,YAAY,EAAG,EATS;AASL;AACnBC,EAAAA,QAAQ,EAAG,IAVa,CAUP;;AAVO,CAArB,C,CAYP;;AAEA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAAyC;;AAChD,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB,C,CAEP;;AACA,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B,C,CAEP;;AACA,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC,C,CAEP;;AACA,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAEP;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGrC,YAAT,EAAuBsC,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKzB,cAAL;AAAsB;AAClB,iCACOuB,KADP;AAEIG,UAAAA,QAAQ,EAAG,IAFf;AAGItC,UAAAA,WAAW,EAAG;AAHlB;AAKH;;AACD,SAAKa,cAAL;AAAsB;AAClB,iCACOsB,KADP;AAEIG,UAAAA,QAAQ,EAAG,KAFf;AAGIjC,UAAAA,EAAE,EAAG+B,MAAM,CAACG,IAHhB;AAIIvC,UAAAA,WAAW,EAAG;AAJlB;AAMH;;AACD,SAAKc,cAAL;AAAsB;AAClB,iCACOqB,KADP;AAEIG,UAAAA,QAAQ,EAAG,KAFf;AAGItC,UAAAA,WAAW,EAAG,KAHlB;AAIIC,UAAAA,gBAAgB,EAAGmC,MAAM,CAACI,KAJ9B;AAKInC,UAAAA,EAAE,EAAG;AALT;AAOH;;AACD,SAAKa,eAAL;AAAuB;AACnB,iCACOiB,KADP;AAEIpC,UAAAA,YAAY,EAAG;AAFnB;AAIH;;AACD,SAAKoB,eAAL;AAAuB;AACnB,iCACOgB,KADP;AAEIpC,UAAAA,YAAY,EAAG,KAFnB;AAGIM,UAAAA,EAAE,EAAG;AAHT;AAKH;;AACD,SAAKI,eAAL;AAAuB;AACnB,iCACO0B,KADP;AAEIhC,UAAAA,WAAW,EAAG,IAFlB;AAGID,UAAAA,UAAU,EAAG;AAHjB;AAKH;;AACD,SAAKQ,eAAL;AAAuB;AACnB,iCACOyB,KADP;AAEIhC,UAAAA,WAAW,EAAG,KAFlB;AAGID,UAAAA,UAAU,EAAG;AAHjB;AAKH;;AACD,SAAKS,eAAL;AAAuB;AACnB,iCACOwB,KADP;AAEIhC,UAAAA,WAAW,EAAG,KAFlB;AAGIC,UAAAA,iBAAiB,EAAGgC,MAAM,CAACI;AAH/B;AAKH;;AACD,SAAKzB,iBAAL;AAAyB;AACrB,iCACOoB,KADP;AAGH;;AACD,SAAKnB,iBAAL;AAAyB;AACrB,YAAIoB,MAAM,CAAC/B,EAAX,EAAe;AACX,mCACO8B,KADP;AAEI9B,YAAAA,EAAE,EAAG+B,MAAM,CAACG;AAFhB;AAIH;;AACD,iCACOJ,KADP;AAEI3B,UAAAA,QAAQ,EAAG4B,MAAM,CAACG;AAFtB;AAIH;;AACD,SAAKtB,iBAAL;AAAyB;AACrB,iCACOkB,KADP;AAGH;;AACD;AAAU;AACN,iCACOA,KADP;AAGH;AArFL;AAuFH,CAxFD;;AA0FA,eAAeD,OAAf","sourcesContent":["// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\r\n\r\n// const dummyUser = {\r\n//     id : 1,\r\n//     nickname : 'JINNE',\r\n//     Post : [],\r\n//     Followings : [],\r\n//     Followers : [],\r\n// }\r\n\r\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다.\r\nexport const initialState = {\r\n    isLoggingOut : false, //로그아웃 시도중\r\n    isLoggingIn : false, //로그인 시도중\r\n    logInErrorReason : '', //로그인 에러 사유\r\n    isSignedUp : false, //회원가입 성공\r\n    isSigningUp : false, //회원가입 시도중\r\n    signUpErrorReason : '', //회원가입 실패 사유\r\n    me : null, //내 정보\r\n    followingList : [], //팔로잉 리스트\r\n    followerList : [], //팔로워 리스트\r\n    userInfo : null, //남의 정보\r\n};\r\n// 여기까지 store\r\n\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; //액션의 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n\r\n// 팔로워, 팔로잉 목록 불러오기\r\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\r\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\r\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\r\n\r\n// 팔로우 하는 액션\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n\r\n// 중요한 액션!!!!! 리듀서의 단점때문에 만들어진 액션\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\n\r\n// // 실제 액션\r\n// export const loginRequestAction = {\r\n//     type : LOG_IN_REQUEST,\r\n// };\r\n\r\n// export const logoutAction = {\r\n//     type : LOG_OUT_REQUEST,\r\n// }\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoadng : true,\r\n                isLoggingIn : true,\r\n            };\r\n        }\r\n        case LOG_IN_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                isLoadng : false,\r\n                me : action.data,\r\n                isLoggingIn : false,\r\n            }\r\n        }\r\n        case LOG_IN_FAILURE : {\r\n            return {\r\n                ...state,\r\n                isLoadng : false,\r\n                isLoggingIn : false,\r\n                logInErrorReason : action.error,\r\n                me : null,\r\n            }\r\n        }\r\n        case LOG_OUT_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoggingOut : true,\r\n            }\r\n        }\r\n        case LOG_OUT_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                isLoggingOut : false,\r\n                me : null,\r\n            }\r\n        }\r\n        case SIGN_UP_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isSigningUp : true,\r\n                isSignedUp : false,\r\n            };\r\n        }\r\n        case SIGN_UP_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                isSigningUp : false,\r\n                isSignedUp : true\r\n            }\r\n        }\r\n        case SIGN_UP_FAILURE : {\r\n            return {\r\n                ...state,\r\n                isSigningUp : false,\r\n                signUpErrorReason : action.error,\r\n            }\r\n        }\r\n        case LOAD_USER_REQUEST : {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case LOAD_USER_SUCCESS : {\r\n            if (action.me) {\r\n                return {\r\n                    ...state,\r\n                    me : action.data,\r\n                };\r\n            }\r\n            return {\r\n                ...state,\r\n                userInfo : action.data,\r\n            }\r\n        }\r\n        case LOAD_USER_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}