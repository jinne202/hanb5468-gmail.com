{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\n// const dummyUser = {\n//     id : 1,\n//     nickname : 'JINNE',\n//     Post : [],\n//     Followings : [],\n//     Followers : [],\n// }\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다.\nexport const initialState = {\n  isLoggingOut: false,\n  //로그아웃 시도중\n  isLoggingIn: false,\n  //로그인 시도중\n  logInErrorReason: '',\n  //로그인 에러 사유\n  isSignedUp: false,\n  //회원가입 성공\n  isSigningUp: false,\n  //회원가입 시도중\n  signUpErrorReason: '',\n  //회원가입 실패 사유\n  me: null,\n  //내 정보\n  followingList: [],\n  //팔로잉 리스트\n  followerList: [],\n  //팔로워 리스트\n  userInfo: null //남의 정보\n\n}; // 여기까지 store\n\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; //액션의 이름\n\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; // 팔로워, 팔로잉 목록 불러오기\n\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE'; // 팔로우 하는 액션\n\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE'; // 중요한 액션!!!!! 리듀서의 단점때문에 만들어진 액션\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'; // // 실제 액션\n// export const loginRequestAction = {\n//     type : LOG_IN_REQUEST,\n// };\n// export const logoutAction = {\n//     type : LOG_OUT_REQUEST,\n// }\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoadng: true,\n          isLoggingIn: true\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoadng: false,\n          me: action.data,\n          isLoggingIn: false\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoadng: false,\n          isLoggingIn: false,\n          logInErrorReason: action.error,\n          me: null\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: true\n        });\n      }\n\n    case LOG_OUT_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggingOut: false,\n          me: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: true,\n          isSignedUp: false\n        });\n      }\n\n    case SIGN_UP_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          isSignedUp: true\n        });\n      }\n\n    case SIGN_UP_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isSigningUp: false,\n          signUpErrorReason: action.error\n        });\n      }\n\n    case LOAD_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_USER_SUCCESS:\n      {\n        if (action.me) {\n          return _objectSpread({}, state, {\n            me: action.data\n          });\n        }\n\n        return _objectSpread({}, state, {\n          userInfo: action.data\n        });\n      }\n\n    case LOAD_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case FOLLOW_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case FOLLOW_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followings: [{\n              id: action.data\n            }, ...state.me.Followings]\n          })\n        });\n      }\n\n    case FOLLOW_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNFOLLOW_USER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNFOLLOW_USER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followings: state.me.Followings.filter(v => v.id !== action.data)\n          }),\n          followingList: state.followingList.filter(v => v.id !== action.data)\n        });\n      }\n\n    case UNFOLLOW_USER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case ADD_POST_TO_ME:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Posts: [{\n              id: action.data\n            }, ...state.me.Posts]\n          })\n        });\n      }\n\n    case LOAD_FOLLOWERS_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWERS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          followerList: action.data\n        });\n      }\n\n    case LOAD_FOLLOWERS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWINGS_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LOAD_FOLLOWINGS_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          followingList: action.data\n        });\n      }\n\n    case LOAD_FOLLOWINGS_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_FOLLOWER_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_FOLLOWER_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            Followers: state.me.Followers.filter(v => v.id !== action.data)\n          }),\n          followerList: state.followerList.filter(v => v.id !== action.data)\n        });\n      }\n\n    case REMOVE_FOLLOWER_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case EDIT_NICKNAME_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case EDIT_NICKNAME_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          me: _objectSpread({}, state.me, {\n            nickname: action.data\n          })\n        });\n      }\n\n    case EDIT_NICKNAME_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/project/nodebird/front/reducers/user.js"],"names":["initialState","isLoggingOut","isLoggingIn","logInErrorReason","isSignedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","LOAD_FOLLOWINGS_REQUEST","LOAD_FOLLOWINGS_SUCCESS","LOAD_FOLLOWINGS_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","EDIT_NICKNAME_REQUEST","EDIT_NICKNAME_SUCCESS","EDIT_NICKNAME_FAILURE","ADD_POST_TO_ME","reducer","state","action","type","isLoadng","data","error","Followings","id","filter","v","Posts","Followers","nickname"],"mappings":";;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,YAAY,EAAG,KADS;AACF;AACtBC,EAAAA,WAAW,EAAG,KAFU;AAEH;AACrBC,EAAAA,gBAAgB,EAAG,EAHK;AAGD;AACvBC,EAAAA,UAAU,EAAG,KAJW;AAIJ;AACpBC,EAAAA,WAAW,EAAG,KALU;AAKH;AACrBC,EAAAA,iBAAiB,EAAG,EANI;AAMA;AACxBC,EAAAA,EAAE,EAAG,IAPmB;AAOb;AACXC,EAAAA,aAAa,EAAG,EARQ;AAQJ;AACpBC,EAAAA,YAAY,EAAG,EATS;AASL;AACnBC,EAAAA,QAAQ,EAAG,IAVa,CAUP;;AAVO,CAArB,C,CAYP;;AAEA,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAAyC;;AAChD,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,MAAMC,eAAe,GAAG,iBAAxB,C,CAEP;;AACA,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AACP,OAAO,MAAMC,sBAAsB,GAAG,wBAA/B;AAEP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC,C,CAEP;;AACA,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,MAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AAEP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AACP,OAAO,MAAMC,uBAAuB,GAAG,yBAAhC;AAEP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B;AACP,OAAO,MAAMC,qBAAqB,GAAG,uBAA9B,C,CAEP;;AACA,OAAO,MAAMC,cAAc,GAAG,gBAAvB,C,CAEP;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAG3C,YAAT,EAAuB4C,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK/B,cAAL;AAAsB;AAClB,iCACO6B,KADP;AAEIG,UAAAA,QAAQ,EAAG,IAFf;AAGI5C,UAAAA,WAAW,EAAG;AAHlB;AAKH;;AACD,SAAKa,cAAL;AAAsB;AAClB,iCACO4B,KADP;AAEIG,UAAAA,QAAQ,EAAG,KAFf;AAGIvC,UAAAA,EAAE,EAAGqC,MAAM,CAACG,IAHhB;AAII7C,UAAAA,WAAW,EAAG;AAJlB;AAMH;;AACD,SAAKc,cAAL;AAAsB;AAClB,iCACO2B,KADP;AAEIG,UAAAA,QAAQ,EAAG,KAFf;AAGI5C,UAAAA,WAAW,EAAG,KAHlB;AAIIC,UAAAA,gBAAgB,EAAGyC,MAAM,CAACI,KAJ9B;AAKIzC,UAAAA,EAAE,EAAG;AALT;AAOH;;AACD,SAAKa,eAAL;AAAuB;AACnB,iCACOuB,KADP;AAEI1C,UAAAA,YAAY,EAAG;AAFnB;AAIH;;AACD,SAAKoB,eAAL;AAAuB;AACnB,iCACOsB,KADP;AAEI1C,UAAAA,YAAY,EAAG,KAFnB;AAGIM,UAAAA,EAAE,EAAG;AAHT;AAKH;;AACD,SAAKI,eAAL;AAAuB;AACnB,iCACOgC,KADP;AAEItC,UAAAA,WAAW,EAAG,IAFlB;AAGID,UAAAA,UAAU,EAAG;AAHjB;AAKH;;AACD,SAAKQ,eAAL;AAAuB;AACnB,iCACO+B,KADP;AAEItC,UAAAA,WAAW,EAAG,KAFlB;AAGID,UAAAA,UAAU,EAAG;AAHjB;AAKH;;AACD,SAAKS,eAAL;AAAuB;AACnB,iCACO8B,KADP;AAEItC,UAAAA,WAAW,EAAG,KAFlB;AAGIC,UAAAA,iBAAiB,EAAGsC,MAAM,CAACI;AAH/B;AAKH;;AACD,SAAK/B,iBAAL;AAAyB;AACrB,iCACO0B,KADP;AAGH;;AACD,SAAKzB,iBAAL;AAAyB;AACrB,YAAI0B,MAAM,CAACrC,EAAX,EAAe;AACX,mCACOoC,KADP;AAEIpC,YAAAA,EAAE,EAAGqC,MAAM,CAACG;AAFhB;AAIH;;AACD,iCACOJ,KADP;AAEIjC,UAAAA,QAAQ,EAAGkC,MAAM,CAACG;AAFtB;AAIH;;AACD,SAAK5B,iBAAL;AAAyB;AACrB,iCACOwB,KADP;AAGH;;AACD,SAAKd,mBAAL;AAA2B;AACvB,iCACOc,KADP;AAGH;;AACD,SAAKb,mBAAL;AAA2B;AACvB,iCACOa,KADP;AAEIpC,UAAAA,EAAE,oBACKoC,KAAK,CAACpC,EADX;AAEE0C,YAAAA,UAAU,EAAE,CAAC;AAAEC,cAAAA,EAAE,EAAEN,MAAM,CAACG;AAAb,aAAD,EAAsB,GAAGJ,KAAK,CAACpC,EAAN,CAAS0C,UAAlC;AAFd;AAFN;AAOH;;AACD,SAAKlB,mBAAL;AAA2B;AACvB,iCACOY,KADP;AAGH;;AACD,SAAKX,qBAAL;AAA6B;AACzB,iCACOW,KADP;AAGH;;AACD,SAAKV,qBAAL;AAA4B;AACxB,iCACOU,KADP;AAEIpC,UAAAA,EAAE,oBACKoC,KAAK,CAACpC,EADX;AAEE0C,YAAAA,UAAU,EAAGN,KAAK,CAACpC,EAAN,CAAS0C,UAAT,CAAoBE,MAApB,CAA2BC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASN,MAAM,CAACG,IAAhD;AAFf,YAFN;AAMIvC,UAAAA,aAAa,EAAGmC,KAAK,CAACnC,aAAN,CAAoB2C,MAApB,CAA2BC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASN,MAAM,CAACG,IAAhD;AANpB;AAQH;;AACD,SAAKb,qBAAL;AAA6B;AACzB,iCACOS,KADP;AAGH;;AACD,SAAKF,cAAL;AAAsB;AAClB,iCACOE,KADP;AAEIpC,UAAAA,EAAE,oBACKoC,KAAK,CAACpC,EADX;AAEE8C,YAAAA,KAAK,EAAG,CAAC;AAAEH,cAAAA,EAAE,EAAGN,MAAM,CAACG;AAAd,aAAD,EAAuB,GAAGJ,KAAK,CAACpC,EAAN,CAAS8C,KAAnC;AAFV;AAFN;AAOH;;AACD,SAAK9B,sBAAL;AAA8B;AAC1B,iCACOoB,KADP;AAGH;;AACD,SAAKnB,sBAAL;AAA6B;AACzB,iCACOmB,KADP;AAEIlC,UAAAA,YAAY,EAAGmC,MAAM,CAACG;AAF1B;AAIH;;AACD,SAAKtB,sBAAL;AAA8B;AAC1B,iCACOkB,KADP;AAGH;;AACD,SAAKjB,uBAAL;AAA+B;AAC3B,iCACOiB,KADP;AAGH;;AACD,SAAKhB,uBAAL;AAA8B;AAC1B,iCACOgB,KADP;AAEInC,UAAAA,aAAa,EAAGoC,MAAM,CAACG;AAF3B;AAIH;;AACD,SAAKnB,uBAAL;AAA+B;AAC3B,iCACOe,KADP;AAGH;;AACD,SAAKR,uBAAL;AAA+B;AAC3B,iCACOQ,KADP;AAGH;;AACD,SAAKP,uBAAL;AAA+B;AAC3B,iCACOO,KADP;AAEIpC,UAAAA,EAAE,oBACKoC,KAAK,CAACpC,EADX;AAEE+C,YAAAA,SAAS,EAAEX,KAAK,CAACpC,EAAN,CAAS+C,SAAT,CAAmBH,MAAnB,CAA0BC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASN,MAAM,CAACG,IAA/C;AAFb,YAFN;AAMItC,UAAAA,YAAY,EAAGkC,KAAK,CAAClC,YAAN,CAAmB0C,MAAnB,CAA0BC,CAAC,IAAIA,CAAC,CAACF,EAAF,KAASN,MAAM,CAACG,IAA/C;AANnB;AAQH;;AACD,SAAKV,uBAAL;AAA+B;AAC3B,iCACOM,KADP;AAGH;;AACD,SAAKL,qBAAL;AAA6B;AACzB,iCACOK,KADP;AAGH;;AACD,SAAKJ,qBAAL;AAA6B;AACzB,iCACOI,KADP;AAEIpC,UAAAA,EAAE,oBACKoC,KAAK,CAACpC,EADX;AAEEgD,YAAAA,QAAQ,EAAGX,MAAM,CAACG;AAFpB;AAFN;AAOH;;AACD,SAAKP,qBAAL;AAA6B;AACzB,iCACOG,KADP;AAGH;;AACD;AAAU;AACN,iCACOA,KADP;AAGH;AA5ML;AA8MH,CA/MD;;AAiNA,eAAeD,OAAf","sourcesContent":["// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\r\n\r\n// const dummyUser = {\r\n//     id : 1,\r\n//     nickname : 'JINNE',\r\n//     Post : [],\r\n//     Followings : [],\r\n//     Followers : [],\r\n// }\r\n\r\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다.\r\nexport const initialState = {\r\n    isLoggingOut : false, //로그아웃 시도중\r\n    isLoggingIn : false, //로그인 시도중\r\n    logInErrorReason : '', //로그인 에러 사유\r\n    isSignedUp : false, //회원가입 성공\r\n    isSigningUp : false, //회원가입 시도중\r\n    signUpErrorReason : '', //회원가입 실패 사유\r\n    me : null, //내 정보\r\n    followingList : [], //팔로잉 리스트\r\n    followerList : [], //팔로워 리스트\r\n    userInfo : null, //남의 정보\r\n};\r\n// 여기까지 store\r\n\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; //액션의 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n\r\n// 팔로워, 팔로잉 목록 불러오기\r\nexport const LOAD_FOLLOWERS_REQUEST = 'LOAD_FOLLOWERS_REQUEST';\r\nexport const LOAD_FOLLOWERS_SUCCESS = 'LOAD_FOLLOWERS_SUCCESS';\r\nexport const LOAD_FOLLOWERS_FAILURE = 'LOAD_FOLLOWERS_FAILURE';\r\n\r\nexport const LOAD_FOLLOWINGS_REQUEST = 'LOAD_FOLLOWINGS_REQUEST';\r\nexport const LOAD_FOLLOWINGS_SUCCESS = 'LOAD_FOLLOWINGS_SUCCESS';\r\nexport const LOAD_FOLLOWINGS_FAILURE = 'LOAD_FOLLOWINGS_FAILURE';\r\n\r\n// 팔로우 하는 액션\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n\r\nexport const EDIT_NICKNAME_REQUEST = 'EDIT_NICKNAME_REQUEST';\r\nexport const EDIT_NICKNAME_SUCCESS = 'EDIT_NICKNAME_SUCCESS';\r\nexport const EDIT_NICKNAME_FAILURE = 'EDIT_NICKNAME_FAILURE';\r\n\r\n// 중요한 액션!!!!! 리듀서의 단점때문에 만들어진 액션\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\n\r\n// // 실제 액션\r\n// export const loginRequestAction = {\r\n//     type : LOG_IN_REQUEST,\r\n// };\r\n\r\n// export const logoutAction = {\r\n//     type : LOG_OUT_REQUEST,\r\n// }\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoadng : true,\r\n                isLoggingIn : true,\r\n            };\r\n        }\r\n        case LOG_IN_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                isLoadng : false,\r\n                me : action.data,\r\n                isLoggingIn : false,\r\n            }\r\n        }\r\n        case LOG_IN_FAILURE : {\r\n            return {\r\n                ...state,\r\n                isLoadng : false,\r\n                isLoggingIn : false,\r\n                logInErrorReason : action.error,\r\n                me : null,\r\n            }\r\n        }\r\n        case LOG_OUT_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoggingOut : true,\r\n            }\r\n        }\r\n        case LOG_OUT_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                isLoggingOut : false,\r\n                me : null,\r\n            }\r\n        }\r\n        case SIGN_UP_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isSigningUp : true,\r\n                isSignedUp : false,\r\n            };\r\n        }\r\n        case SIGN_UP_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                isSigningUp : false,\r\n                isSignedUp : true\r\n            }\r\n        }\r\n        case SIGN_UP_FAILURE : {\r\n            return {\r\n                ...state,\r\n                isSigningUp : false,\r\n                signUpErrorReason : action.error,\r\n            }\r\n        }\r\n        case LOAD_USER_REQUEST : {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case LOAD_USER_SUCCESS : {\r\n            if (action.me) {\r\n                return {\r\n                    ...state,\r\n                    me : action.data,\r\n                };\r\n            }\r\n            return {\r\n                ...state,\r\n                userInfo : action.data,\r\n            }\r\n        }\r\n        case LOAD_USER_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case FOLLOW_USER_REQUEST : {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case FOLLOW_USER_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    Followings: [{ id: action.data }, ...state.me.Followings],\r\n                },\r\n              };\r\n        }\r\n        case FOLLOW_USER_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case UNFOLLOW_USER_REQUEST : {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case UNFOLLOW_USER_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    Followings : state.me.Followings.filter(v => v.id !== action.data),\r\n                },\r\n                followingList : state.followingList.filter(v => v.id !== action.data),\r\n            };\r\n        }\r\n        case UNFOLLOW_USER_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case ADD_POST_TO_ME : {\r\n            return {\r\n                ...state,\r\n                me : {\r\n                    ...state.me,\r\n                    Posts : [{ id : action.data }, ...state.me.Posts],\r\n                },\r\n            };\r\n        }\r\n        case LOAD_FOLLOWERS_REQUEST : {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case LOAD_FOLLOWERS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                followerList : action.data,\r\n            };\r\n        }\r\n        case LOAD_FOLLOWERS_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case LOAD_FOLLOWINGS_REQUEST : {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case LOAD_FOLLOWINGS_SUCCESS: {\r\n            return {\r\n                ...state,\r\n                followingList : action.data,\r\n            };\r\n        }\r\n        case LOAD_FOLLOWINGS_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case REMOVE_FOLLOWER_REQUEST : {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case REMOVE_FOLLOWER_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    Followers: state.me.Followers.filter(v => v.id !== action.data),\r\n                },\r\n                followerList : state.followerList.filter(v => v.id !== action.data),\r\n            };\r\n        }\r\n        case REMOVE_FOLLOWER_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case EDIT_NICKNAME_REQUEST : {\r\n            return {\r\n                ...state,\r\n            };\r\n        }\r\n        case EDIT_NICKNAME_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                me: {\r\n                    ...state.me,\r\n                    nickname : action.data,\r\n                },\r\n            };\r\n        }\r\n        case EDIT_NICKNAME_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}