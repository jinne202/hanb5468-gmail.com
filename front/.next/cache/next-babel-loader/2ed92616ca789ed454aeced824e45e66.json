{"ast":null,"code":"var __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport Link from 'next/link';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\nimport PostImages from './PostImages';\nimport PostCardContent from './PostCardContent';\n\nconst PostCard = ({\n  post\n}) => {\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false);\n  const {\n    0: commentText,\n    1: setCommentText\n  } = useState('');\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    commentAdded,\n    isAddingComment\n  } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n  const onToggleComment = useCallback(() => {\n    // 펼쳐져있으면 닫고 닫혀있으면 펼치고\n    setCommentFormOpened(prev => !prev);\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENT_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    } // likers 안에 좋아요 누른 사람들의 배열이 들어있음\n\n\n    if (liked) {\n      //좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      //좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  const onRetweet = useCallback(() => {\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  const onFollow = useCallback(userId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  const onUnfollow = useCallback(userId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: userId\n    });\n  }, []);\n  return __jsx(\"div\", null, __jsx(Card, {\n    style: {\n      margin: '40px 0 0'\n    },\n    key: +post.createdAT // cover = {post.Images[0] && <img alt=\"example\" src={`http://localhost:7070/` + post.Images[0].src}/>}\n    ,\n    cover: post.Images && post.Images[0] && __jsx(PostImages, {\n      images: post.Images\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    title: post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다` : null,\n    extra: !me || post.User.id === me.id //로그인을 안 했다면 버튼이 보이지 않음\n    ? null : me.Followings && me.Followings.find(v => v.id === post.User.id) //내가 이미 팔로우 한 사용자 \n    ? __jsx(Button, {\n      onClick: onUnfollow(post.User.id)\n    }, \"UnFollow\") : __jsx(Button, {\n      onClick: onFollow(post.User.id)\n    }, \"Follow\")\n  }, post.RetweetId && post.Retweet ? __jsx(Card, {\n    cover: post.Retweet.Images[0] && __jsx(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: `/user/${post.Retweet.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.Retweet.content\n    })\n  })) : __jsx(Card.Meta, {\n    avatar: __jsx(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: `/user/${post.User.id}`\n    }, __jsx(\"a\", null, __jsx(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content\n    })\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment\n  }, __jsx(Form.Item, null, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: `${post.Comments ? post.Comments.length : 0} reply`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: item => __jsx(\"li\", null, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`\n      }, __jsx(\"a\", null, __jsx(Avatar, null, item.User.nickname[0]))),\n      content: item.content\n    }))\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAT: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/project/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","Link","Card","Icon","Button","Avatar","Form","Input","List","Comment","useSelector","useDispatch","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","ADD_COMMENT_REQUEST","LOAD_COMMENT_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","RETWEET_REQUEST","PostImages","PostCardContent","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","me","state","user","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","onRetweet","onFollow","userId","onUnfollow","margin","createdAT","Images","RetweetId","User","nickname","Followings","Retweet","pathname","query","Comments","length","item","propTypes","shape","object","string","img"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Link from 'next/link';\r\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST, RETWEET_REQUEST } from '../reducers/post';\r\nimport PostImages from './PostImages';\r\nimport PostCardContent from './PostCardContent'\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        // 펼쳐져있으면 닫고 닫혀있으면 펼치고\r\n        setCommentFormOpened(prev => !prev);\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type : LOAD_COMMENT_REQUEST,\r\n                data : post.id,\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : ADD_COMMENT_REQUEST,\r\n            data : {\r\n                postId : post.id,\r\n                content : commentText,\r\n            },\r\n        });\r\n    }, [me && me.id, commentText]);\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    const onToggleLike = useCallback(()=> {\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        // likers 안에 좋아요 누른 사람들의 배열이 들어있음\r\n        if (liked) { //좋아요 누른 상태\r\n            dispatch({\r\n                type : UNLIKE_POST_REQUEST,\r\n                data : post.id\r\n            })\r\n        } else { //좋아요 안 누른 상태\r\n            dispatch({\r\n                type : LIKE_POST_REQUEST,\r\n                data : post.id\r\n            })\r\n        }\r\n    }, [me && me.id, post && post.id, liked]);\r\n\r\n    const onRetweet = useCallback(() => {\r\n        if(!me){\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : RETWEET_REQUEST,\r\n            data : post.id,\r\n        });\r\n    }, [me && me.id , post && post.id]);\r\n\r\n    const onFollow = useCallback(userId => () => {\r\n        dispatch({\r\n            type : FOLLOW_USER_REQUEST,\r\n            data : userId,\r\n        });\r\n    }, []);\r\n\r\n    const onUnfollow = useCallback(userId => () => {\r\n        dispatch({\r\n            type : UNFOLLOW_USER_REQUEST,\r\n            data : userId,\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                style = {{margin : '40px 0 0'}}\r\n                key = {+post.createdAT}\r\n                // cover = {post.Images[0] && <img alt=\"example\" src={`http://localhost:7070/` + post.Images[0].src}/>}\r\n                cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\r\n                actions = {[\r\n                    <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet}/>,\r\n                    <Icon type=\"heart\" key=\"heart\" theme={liked ? 'twoTone' : 'outlined'} twoToneColor=\"#eb2f96\" onClick={onToggleLike}/>,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\"/>\r\n                ]}\r\n                title = {post.RetweetId ? `${post.User.nickname}님이 리트윗 하셨습니다` : null}\r\n                extra = { !me || post.User.id === me.id //로그인을 안 했다면 버튼이 보이지 않음\r\n                    ?\r\n                    null\r\n                    : me.Followings && me.Followings.find(v => v.id === post.User.id) //내가 이미 팔로우 한 사용자 \r\n                        ? <Button onClick={onUnfollow(post.User.id)}>UnFollow</Button>\r\n                        : <Button onClick={onFollow(post.User.id)}>Follow</Button>\r\n                }\r\n            >\r\n            {post.RetweetId && post.Retweet\r\n            ? (\r\n            <Card cover = {post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}>\r\n                <Card.Meta\r\n                    avatar = {<Link href = {{ pathname : '/user', query : { id : post.Retweet.User.id } }} as = {`/user/${post.Retweet.User.id}`}><a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a></Link>}\r\n                    title = {post.Retweet.User.nickname}\r\n                    description = {<PostCardContent postData={post.Retweet.content}/>}\r\n                />\r\n            </Card>\r\n            ) : (\r\n            <Card.Meta\r\n                avatar = {<Link href = {{ pathname : '/user', query : { id : post.User.id } }} as = {`/user/${post.User.id}`}><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\r\n                title = {post.User.nickname}\r\n                description = {<PostCardContent postData={post.content}/>}\r\n            />\r\n            )}\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\" loading = {isAddingComment}>삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} reply`}\r\n                        itemLayout = \"horizontal\"\r\n                        dataSource = {post.Comments || []}\r\n                        renderItem = {item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author = {item.User.nickname}\r\n                                    avatar = {<Link href = {{ pathname : '/user', query : { id : item.User.id } }} as = {`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                                    content = {item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post : PropTypes.shape({\r\n        User : PropTypes.object,\r\n        content : PropTypes.string,\r\n        img : PropTypes.string,\r\n        createdAT : PropTypes.string,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}