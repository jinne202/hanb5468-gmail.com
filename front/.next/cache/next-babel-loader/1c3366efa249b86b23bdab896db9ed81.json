{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\nexport const initialState = {\n  isLoggedIn: false,\n  user: {}\n};\nexport const LOG_IN = 'LOG_IN'; //액션의 이름\n\nexport const LOG_OUT = 'LOG_OUT'; // 실제 액션\n\nexport const loginAction = {\n  type: LOG_IN,\n  data: {\n    nickname: 'JINNE'\n  }\n};\nexport const logoutAction = {\n  type: LOG_OUT\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: action.data\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/project/nodebird/front/reducers/user.js"],"names":["initialState","isLoggedIn","user","LOG_IN","LOG_OUT","loginAction","type","data","nickname","logoutAction","reducer","state","action"],"mappings":";;;;;;AAAA;AAEA,OAAO,MAAMA,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAG,KADW;AAExBC,EAAAA,IAAI,EAAG;AAFiB,CAArB;AAKP,OAAO,MAAMC,MAAM,GAAG,QAAf,C,CAAyB;;AAChC,OAAO,MAAMC,OAAO,GAAG,SAAhB,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,IAAI,EAAGH,MADgB;AAEvBI,EAAAA,IAAI,EAAG;AACHC,IAAAA,QAAQ,EAAG;AADR;AAFgB,CAApB;AAOP,OAAO,MAAMC,YAAY,GAAG;AACxBH,EAAAA,IAAI,EAAGF;AADiB,CAArB;;AAIP,MAAMM,OAAO,GAAG,CAACC,KAAK,GAAGX,YAAT,EAAuBY,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKH,MAAL;AAAc;AACV,iCACOQ,KADP;AAEIV,UAAAA,UAAU,EAAG,IAFjB;AAGIC,UAAAA,IAAI,EAAGU,MAAM,CAACL;AAHlB;AAKH;;AACD,SAAKH,OAAL;AAAe;AACX,iCACOO,KADP;AAEIV,UAAAA,UAAU,EAAG,KAFjB;AAGIC,UAAAA,IAAI,EAAG;AAHX;AAKH;;AACD;AAAU;AACN,iCACOS,KADP;AAGH;AAnBL;AAqBH,CAtBD;;AAwBA,eAAeD,OAAf","sourcesContent":["// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\r\n\r\nexport const initialState = {\r\n    isLoggedIn : false,\r\n    user : {},\r\n};\r\n\r\nexport const LOG_IN = 'LOG_IN'; //액션의 이름\r\nexport const LOG_OUT = 'LOG_OUT'\r\n\r\n// 실제 액션\r\nexport const loginAction = {\r\n    type : LOG_IN,\r\n    data : {\r\n        nickname : 'JINNE',\r\n    }\r\n};\r\n\r\nexport const logoutAction = {\r\n    type : LOG_OUT,\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : true,\r\n                user : action.data,\r\n            }\r\n        }\r\n        case LOG_OUT : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : false,\r\n                user : null,\r\n            }\r\n        }\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}