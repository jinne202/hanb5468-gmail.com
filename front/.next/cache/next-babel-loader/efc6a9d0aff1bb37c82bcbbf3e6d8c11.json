{"ast":null,"code":"import { all, fork, takeEvery, put, delay, call } from 'redux-saga/effects';\nimport axios from 'axios';\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, LOG_IN_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, FOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE, UNFOLLOW_USER_FAILURE, UNFOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE } from '../reducers/user';\n\nfunction loginAPI(loginData) {\n  // 서버에 요청을 보내는 부분\n  return axios.post('/user/login', loginData, {\n    withCredentials: true\n  });\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: result.data //axios 응답 정보\n\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  yield takeEvery(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post('/user/', signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    yield put({\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nfunction logOutAPI() {\n  return axios.post('/user/logout', {}, {\n    withCredentials: true\n  });\n}\n\nfunction* logOut(action) {\n  try {\n    yield call(logOutAPI, action.data);\n    yield put({\n      type: LOG_OUT_SUCCESS\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOG_OUT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLogOut() {\n  yield takeEvery(LOG_OUT_REQUEST, logOut);\n}\n\nfunction loadUserAPI(userId) {\n  return axios.get(userId ? `/user/${userId}` : '/user/', {\n    withCredentials: true\n  });\n}\n\nfunction* loadUser(action) {\n  //자신에 대한 정보 + 남의 정보 같이\n  try {\n    const result = yield call(loadUserAPI, action.data);\n    yield put({\n      type: LOAD_USER_SUCCESS,\n      data: result.data,\n      me: !action.data //action.data가 userId - 만약 userId가 있으면 남, userId가 없으면 내 정보 불러온다\n\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUser() {\n  yield takeEvery(LOAD_USER_REQUEST, loadUser);\n}\n\nfunction followAPI(userId) {\n  return axios.post(`/user/${userId}/follow`, {}, {\n    withCredentials: true\n  });\n}\n\nfunction* follow(action) {\n  //자신에 대한 정보 + 남의 정보 같이\n  try {\n    const result = yield call(followAPI, action.data);\n    yield put({\n      type: FOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: FOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchFollow() {\n  yield takeEvery(FOLLOW_USER_REQUEST, follow);\n}\n\nfunction unfollowAPI(userId) {\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n}\n\nfunction* unfollow(action) {\n  //자신에 대한 정보 + 남의 정보 같이\n  try {\n    const result = yield call(unfollowAPI, action.data);\n    yield put({\n      type: UNFOLLOW_USER_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNFOLLOW_USER_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnfollow() {\n  yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\n}\n\nfunction loadFollowersAPI(userId) {\n  return axios.delete(`/user/${userId}/follow`, {\n    withCredentials: true\n  });\n}\n\nfunction* loadFollowers(action) {\n  //자신에 대한 정보 + 남의 정보 같이\n  try {\n    const result = yield call(loadFollowersAPI, action.data);\n    yield put({\n      type: LOAD_FOLLOWERS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LOAD_FOLLOWERS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadFollowers() {\n  yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchLogOut), fork(watchLoadUser), fork(watchSignUp), fork(watchFollow), fork(watchUnfollow), fork(watchLoadFollowers), fork(watchLoadFollowings), fork(watchRemoveFollower)]);\n}","map":{"version":3,"sources":["C:/project/nodebird/front/sagas/user.js"],"names":["all","fork","takeEvery","put","delay","call","axios","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","LOG_IN_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOG_OUT_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOAD_USER_REQUEST","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","LOAD_FOLLOWERS_REQUEST","LOAD_FOLLOWERS_SUCCESS","LOAD_FOLLOWERS_FAILURE","loginAPI","loginData","post","withCredentials","login","action","result","data","type","e","console","error","watchLogin","signUpAPI","signUpData","signUp","watchSignUp","logOutAPI","logOut","watchLogOut","loadUserAPI","userId","get","loadUser","me","watchLoadUser","followAPI","follow","watchFollow","unfollowAPI","delete","unfollow","watchUnfollow","loadFollowersAPI","loadFollowers","watchLoadFollowers","userSaga","watchLoadFollowings","watchRemoveFollower"],"mappings":"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","sourcesContent":["import { all, fork, takeEvery, put, delay, call } from 'redux-saga/effects';\r\nimport axios from 'axios'\r\nimport { LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, LOG_IN_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE, LOG_OUT_SUCCESS, LOG_OUT_FAILURE, LOG_OUT_REQUEST, LOAD_USER_SUCCESS, LOAD_USER_FAILURE, LOAD_USER_REQUEST, FOLLOW_USER_REQUEST, FOLLOW_USER_SUCCESS, FOLLOW_USER_FAILURE, UNFOLLOW_USER_FAILURE, UNFOLLOW_USER_REQUEST, UNFOLLOW_USER_SUCCESS, LOAD_FOLLOWERS_REQUEST, LOAD_FOLLOWERS_SUCCESS, LOAD_FOLLOWERS_FAILURE } from '../reducers/user';\r\n\r\nfunction loginAPI(loginData){\r\n    // 서버에 요청을 보내는 부분\r\n    return axios.post('/user/login', loginData, {\r\n        withCredentials : true,\r\n    });\r\n}\r\n\r\nfunction* login(action){\r\n    try {\r\n        const result = yield call(loginAPI, action.data);\r\n        yield put({\r\n            type : LOG_IN_SUCCESS,\r\n            data : result.data, //axios 응답 정보\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LOG_IN_FAILURE,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogin(){\r\n    yield takeEvery(LOG_IN_REQUEST, login);\r\n}\r\n\r\nfunction signUpAPI(signUpData){\r\n    return axios.post('/user/', signUpData);\r\n}\r\n\r\nfunction* signUp(action){\r\n    try {\r\n        yield call(signUpAPI, action.data);\r\n        yield put({\r\n            type : SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : SIGN_UP_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchSignUp(){\r\n    yield takeEvery(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\nfunction logOutAPI(){\r\n    return axios.post('/user/logout', {}, {\r\n        withCredentials : true,\r\n    });\r\n}\r\n\r\nfunction* logOut(action){\r\n    try {\r\n        yield call(logOutAPI, action.data);\r\n        yield put({\r\n            type : LOG_OUT_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LOG_OUT_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLogOut(){\r\n    yield takeEvery(LOG_OUT_REQUEST, logOut);\r\n}\r\n\r\nfunction loadUserAPI(userId){\r\n    return axios.get( userId ? `/user/${userId}` : '/user/', {\r\n        withCredentials : true,\r\n    });\r\n}\r\n\r\nfunction* loadUser(action){ //자신에 대한 정보 + 남의 정보 같이\r\n    try {\r\n        const result = yield call(loadUserAPI, action.data);\r\n        yield put({\r\n            type : LOAD_USER_SUCCESS,\r\n            data : result.data,\r\n            me : !action.data, //action.data가 userId - 만약 userId가 있으면 남, userId가 없으면 내 정보 불러온다\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LOAD_USER_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadUser(){\r\n    yield takeEvery(LOAD_USER_REQUEST, loadUser);\r\n}\r\n\r\nfunction followAPI(userId) {\r\n    return axios.post(`/user/${userId}/follow`, {}, {\r\n        withCredentials: true,\r\n    });\r\n  }\r\n\r\nfunction* follow(action){ //자신에 대한 정보 + 남의 정보 같이\r\n    try {\r\n        const result = yield call(followAPI, action.data);\r\n        yield put({\r\n            type : FOLLOW_USER_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : FOLLOW_USER_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchFollow(){\r\n    yield takeEvery(FOLLOW_USER_REQUEST, follow);\r\n}\r\n\r\nfunction unfollowAPI(userId) {\r\n    return axios.delete(`/user/${userId}/follow`, {\r\n        withCredentials: true,\r\n    });\r\n  }\r\n\r\nfunction* unfollow(action){ //자신에 대한 정보 + 남의 정보 같이\r\n    try {\r\n        const result = yield call(unfollowAPI, action.data);\r\n        yield put({\r\n            type : UNFOLLOW_USER_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : UNFOLLOW_USER_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchUnfollow(){\r\n    yield takeEvery(UNFOLLOW_USER_REQUEST, unfollow);\r\n}\r\n\r\nfunction loadFollowersAPI(userId) {\r\n    return axios.delete(`/user/${userId}/follow`, {\r\n        withCredentials: true,\r\n    });\r\n  }\r\n\r\nfunction* loadFollowers(action){ //자신에 대한 정보 + 남의 정보 같이\r\n    try {\r\n        const result = yield call(loadFollowersAPI, action.data);\r\n        yield put({\r\n            type : LOAD_FOLLOWERS_SUCCESS,\r\n            data : result.data,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : LOAD_FOLLOWERS_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchLoadFollowers(){\r\n    yield takeEvery(LOAD_FOLLOWERS_REQUEST, loadFollowers);\r\n}\r\n\r\nexport default function* userSaga(){\r\n    yield all ([\r\n        fork(watchLogin),\r\n        fork(watchLogOut),\r\n        fork(watchLoadUser),\r\n        fork(watchSignUp),\r\n        fork(watchFollow),\r\n        fork(watchUnfollow),\r\n        fork(watchLoadFollowers),\r\n        fork(watchLoadFollowings),\r\n        fork(watchRemoveFollower),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}