{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest } from 'redux-saga/effects';\n\nfunction addPostAPI() {}\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return put({\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 3:\n          _context.next = 10;\n          break;\n\n        case 5:\n          _context.prev = 5;\n          _context.t0 = _context[\"catch\"](0);\n          console.error(_context.t0);\n          _context.next = 10;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context.t0\n          });\n\n        case 10:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 5]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/project/nodebird/front/sagas/post.js"],"names":["addPost","watchAddPost","postSaga","all","fork","takeLatest","addPostAPI","put","type","SIGN_UP_SUCCESS","console","error","SIGN_UP_FAILURE","SIGN_UP_REQUEST","signUp"],"mappings":";;oDAMUA,O;qDAeAC,Y;qDAKeC,Q;;AA1BzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,QAAsC,oBAAtC;;AAEA,SAASC,UAAT,GAAqB,CAEpB;;AAED,SAAUN,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGQ,iBAAMO,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAGC;AADD,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAOQC,UAAAA,OAAO,CAACC,KAAR;AAPR;AAQQ,iBAAMJ,GAAG,CAAC;AACNC,YAAAA,IAAI,EAAGI,eADD;AAEND,YAAAA,KAAK;AAFC,WAAD,CAAT;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeA,SAAUV,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMI,UAAU,CAACQ,eAAD,EAAkBC,MAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUZ,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAE,CACPC,IAAI,CAACH,YAAD,CADG,CAAF,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest } from 'redux-saga/effects'\r\n\r\nfunction addPostAPI(){\r\n\r\n}\r\n\r\nfunction* addPost(){\r\n    try {\r\n        //yield call(signUpAPI);\r\n        yield put({\r\n            type : SIGN_UP_SUCCESS,\r\n        });\r\n    } catch (e) {\r\n        console.error(e);\r\n        yield put({\r\n            type : SIGN_UP_FAILURE,\r\n            error : e,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(SIGN_UP_REQUEST, signUp);\r\n}\r\n\r\n\r\nexport default function* postSaga(){\r\n    yield all ([\r\n        fork(watchAddPost),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}