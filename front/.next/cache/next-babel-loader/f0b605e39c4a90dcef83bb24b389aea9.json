{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  addPostErrorReason: false,\n  //포스트 업로드 실패 사유\n  isAddingPost: false,\n  //포스트 업로드 중\n  postAdded: false,\n  //포스트 업로드 성공\n  isAddingComment: false,\n  addCommentErrorReason: '',\n  commentAdded: false\n};\nexport var LOAD_MAIN_POST_REQUEST = 'LOAD_MAIN_POST_REQUEST';\nexport var LOAD_MAIN_POST_SUCCESS = 'LOAD_MAIN_POST_SUCCESS';\nexport var LOAD_MAIN_POST_FAILURE = 'LOAD_MAIN_POST_FAILURE';\nexport var LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\nexport var LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\nexport var LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\nexport var LOAD_USER_POST_REQUEST = 'LOAD_USER_POST_REQUEST';\nexport var LOAD_USER_POST_SUCCESS = 'LOAD_USER_POST_SUCCESS';\nexport var LOAD_USER_POST_FAILURE = 'LOAD_USER_POST_FAILURE';\nexport var UPLOAD_IMAGE_REQUEST = 'UPLOAD_IMAGE_REQUEST';\nexport var UPLOAD_IMAGE_SUCCESS = 'UPLOAD_IMAGE_SUCCESS';\nexport var UPLOAD_IMAGE_FAILURE = 'UPLOAD_IMAGE_FAILURE';\nexport var REMOVE_IMAGE = 'REMOVE_IMAGE';\nexport var ADD_POST_REQUEST = 'ADD_POST_REQUEST';\nexport var ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\nexport var ADD_POST_FAILURE = 'ADD_POST_FAILURE';\nexport var LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\nexport var LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\nexport var LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\nexport var UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\nexport var UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\nexport var UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\nexport var LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\nexport var LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\nexport var RETWEET_REQUEST = 'RETWEET_REQUEST';\nexport var RETWEET_SUCCESS = 'RETWEET_SUCCESS';\nexport var RETWEET_FAILURE = 'RETWEET_FAILURE';\nexport var REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\nexport var REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\nexport var REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\nvar addPost = {\n  type: ADD_POST_REQUEST\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: true,\n          addPostErrorReason: '',\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts)),\n          postAdded: true,\n          imagePaths: []\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostErrorReason: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: true,\n          addCommentErrorReason: '',\n          commentAdded: false\n        });\n      }\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        var postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n        var post = state.mainPosts[postIndex];\n        var Comments = [].concat(_toConsumableArray(post.Comments), [action.data.comment]);\n\n        var mainPosts = _toConsumableArray(state.mainPosts);\n\n        mainPosts[postIndex] = _objectSpread({}, post, {\n          Comments: Comments\n        });\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          mainPosts: mainPosts,\n          commentAdded: true\n        });\n      }\n\n    case ADD_COMMENT_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingComment: false,\n          addCommentErrorReason: action.error\n        });\n      }\n\n    case LOAD_COMMENT_SUCCESS:\n      {\n        var _postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var _post = state.mainPosts[_postIndex];\n        var _Comments = action.data.comments;\n\n        var _mainPosts = _toConsumableArray(state.mainPosts);\n\n        _mainPosts[_postIndex] = _objectSpread({}, _post, {\n          Comments: _Comments\n        });\n        return _objectSpread({}, state, {\n          mainPosts: _mainPosts\n        });\n      }\n\n    case LOAD_MAIN_POST_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_USER_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: []\n        });\n      }\n\n    case LOAD_MAIN_POST_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_USER_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: action.data\n        });\n      }\n\n    case LOAD_MAIN_POST_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_USER_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UPLOAD_IMAGE_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UPLOAD_IMAGE_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          imagePaths: [].concat(_toConsumableArray(state.imagePaths), _toConsumableArray(action.data))\n        });\n      }\n\n    case UPLOAD_IMAGE_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_IMAGE:\n      {\n        return _objectSpread({}, state, {\n          imagePaths: state.imagePaths.filter(function (v, i) {\n            return i !== action.index;\n          })\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/project/nodebird/front/reducers/post.js"],"names":["initialState","mainPosts","imagePaths","addPostErrorReason","isAddingPost","postAdded","isAddingComment","addCommentErrorReason","commentAdded","LOAD_MAIN_POST_REQUEST","LOAD_MAIN_POST_SUCCESS","LOAD_MAIN_POST_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POST_REQUEST","LOAD_USER_POST_SUCCESS","LOAD_USER_POST_FAILURE","UPLOAD_IMAGE_REQUEST","UPLOAD_IMAGE_SUCCESS","UPLOAD_IMAGE_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENT_REQUEST","LOAD_COMMENT_SUCCESS","LOAD_COMMENT_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","addPost","type","reducer","state","action","data","error","postIndex","findIndex","v","id","postId","post","Comments","comment","comments","filter","i","index"],"mappings":"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","sourcesContent":["export const initialState = {\r\n    mainPosts : [],\r\n    imagePaths : [],\r\n    addPostErrorReason : false , //포스트 업로드 실패 사유\r\n    isAddingPost : false, //포스트 업로드 중\r\n    postAdded : false, //포스트 업로드 성공\r\n    isAddingComment : false,\r\n    addCommentErrorReason : '',\r\n    commentAdded : false,\r\n};\r\n\r\nexport const LOAD_MAIN_POST_REQUEST = 'LOAD_MAIN_POST_REQUEST';\r\nexport const LOAD_MAIN_POST_SUCCESS = 'LOAD_MAIN_POST_SUCCESS';\r\nexport const LOAD_MAIN_POST_FAILURE = 'LOAD_MAIN_POST_FAILURE';\r\n\r\nexport const LOAD_HASHTAG_POSTS_REQUEST = 'LOAD_HASHTAG_POSTS_REQUEST';\r\nexport const LOAD_HASHTAG_POSTS_SUCCESS = 'LOAD_HASHTAG_POSTS_SUCCESS';\r\nexport const LOAD_HASHTAG_POSTS_FAILURE = 'LOAD_HASHTAG_POSTS_FAILURE';\r\n\r\nexport const LOAD_USER_POST_REQUEST = 'LOAD_USER_POST_REQUEST';\r\nexport const LOAD_USER_POST_SUCCESS = 'LOAD_USER_POST_SUCCESS';\r\nexport const LOAD_USER_POST_FAILURE = 'LOAD_USER_POST_FAILURE';\r\n\r\nexport const UPLOAD_IMAGE_REQUEST = 'UPLOAD_IMAGE_REQUEST';\r\nexport const UPLOAD_IMAGE_SUCCESS = 'UPLOAD_IMAGE_SUCCESS';\r\nexport const UPLOAD_IMAGE_FAILURE = 'UPLOAD_IMAGE_FAILURE';\r\n\r\nexport const REMOVE_IMAGE = 'REMOVE_IMAGE'\r\n\r\nexport const ADD_POST_REQUEST = 'ADD_POST_REQUEST';\r\nexport const ADD_POST_SUCCESS = 'ADD_POST_SUCCESS';\r\nexport const ADD_POST_FAILURE = 'ADD_POST_FAILURE';\r\n\r\nexport const LIKE_POST_REQUEST = 'LIKE_POST_REQUEST';\r\nexport const LIKE_POST_SUCCESS = 'LIKE_POST_SUCCESS';\r\nexport const LIKE_POST_FAILURE = 'LIKE_POST_FAILURE';\r\n\r\nexport const UNLIKE_POST_REQUEST = 'UNLIKE_POST_REQUEST';\r\nexport const UNLIKE_POST_SUCCESS = 'UNLIKE_POST_SUCCESS';\r\nexport const UNLIKE_POST_FAILURE = 'UNLIKE_POST_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const LOAD_COMMENT_REQUEST = 'LOAD_COMMENT_REQUEST';\r\nexport const LOAD_COMMENT_SUCCESS = 'LOAD_COMMENT_SUCCESS';\r\nexport const LOAD_COMMENT_FAILURE = 'LOAD_COMMENT_FAILURE';\r\n\r\nexport const RETWEET_REQUEST = 'RETWEET_REQUEST';\r\nexport const RETWEET_SUCCESS = 'RETWEET_SUCCESS';\r\nexport const RETWEET_FAILURE = 'RETWEET_FAILURE';\r\n\r\nexport const REMOVE_POST_REQUEST = 'REMOVE_POST_REQUEST';\r\nexport const REMOVE_POST_SUCCESS = 'REMOVE_POST_SUCCESS';\r\nexport const REMOVE_POST_FAILURE = 'REMOVE_POST_FAILURE';\r\n\r\n\r\nconst addPost = {\r\n    type : ADD_POST_REQUEST,\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type){\r\n        case ADD_POST_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isAddingPost : true,\r\n                addPostErrorReason : '',\r\n                postAdded : false,\r\n            }\r\n        }\r\n        case ADD_POST_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                isAddingPost : false,\r\n                mainPosts : [action.data, ...state.mainPosts],\r\n                postAdded : true,\r\n                imagePaths : [],\r\n            }\r\n        }\r\n        case ADD_POST_FAILURE : {\r\n            return {\r\n                ...state,\r\n                isAddingPost : false,\r\n                addPostErrorReason : action.error,\r\n            }\r\n        }\r\n        case ADD_COMMENT_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isAddingComment : true,\r\n                addCommentErrorReason : '',\r\n                commentAdded : false,\r\n            }\r\n        }\r\n        case ADD_COMMENT_SUCCESS : {\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = [...post.Comments, action.data.comment];\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = {...post, Comments};\r\n            return {\r\n                ...state,\r\n                isAddingComment : false,\r\n                mainPosts,\r\n                commentAdded : true,\r\n            }\r\n        }\r\n        case ADD_COMMENT_FAILURE : {\r\n            return {\r\n                ...state,\r\n                isAddingComment : false,\r\n                addCommentErrorReason : action.error,\r\n            }\r\n        }\r\n        case LOAD_COMMENT_SUCCESS : {\r\n            const postIndex = state.mainPosts.findIndex(v => v.id === action.data.postId);\r\n            const post = state.mainPosts[postIndex];\r\n            const Comments = action.data.comments;\r\n            const mainPosts = [...state.mainPosts];\r\n            mainPosts[postIndex] = {...post, Comments};\r\n            return {\r\n                ...state,\r\n                mainPosts,\r\n            }\r\n        }\r\n        case LOAD_MAIN_POST_REQUEST :\r\n        case LOAD_HASHTAG_POSTS_REQUEST :\r\n        case LOAD_USER_POST_REQUEST : {\r\n            return {\r\n                ...state,\r\n                mainPosts : [],\r\n            }\r\n        }\r\n        case LOAD_MAIN_POST_SUCCESS :\r\n        case LOAD_HASHTAG_POSTS_SUCCESS :\r\n        case LOAD_USER_POST_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                mainPosts : action.data,\r\n            }\r\n        }\r\n        case LOAD_MAIN_POST_FAILURE :\r\n        case LOAD_HASHTAG_POSTS_FAILURE :\r\n        case LOAD_USER_POST_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case UPLOAD_IMAGE_REQUEST : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case UPLOAD_IMAGE_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                imagePaths : [...state.imagePaths, ...action.data],\r\n            }\r\n        }\r\n        case UPLOAD_IMAGE_FAILURE : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n        case REMOVE_IMAGE : {\r\n            return {\r\n                ...state,\r\n                imagePaths : state.imagePaths.filter((v, i) => i !== action.index),\r\n            };\r\n        }\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}