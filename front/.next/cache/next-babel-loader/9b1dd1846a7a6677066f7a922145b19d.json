{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\nconst dummyUser = {\n  nickname: 'JINNE',\n  Post: [],\n  Followings: [],\n  Followers: []\n}; // 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다.\n\nexport const initialState = {\n  isLoggedIn: false,\n  //로그인 여부\n  isLoggingOut: false,\n  //로그아웃 시도중\n  isLoggingIn: false,\n  //로그인 시도중\n  logInErrorReason: '',\n  //로그인 에러 사유\n  isSignedUp: false,\n  //회원가입 성공\n  isSigningUp: false,\n  //회원가입 시도중\n  signUpErrorReason: '',\n  //회원가입 실패 사유\n  me: null,\n  //내 정보\n  followingList: [],\n  //팔로잉 리스트\n  followerList: [],\n  //팔로워 리스트\n  userInfo: null\n}; // 여기까지 store\n\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; //액션의 이름\n\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE'; // 팔로워, 팔로잉 목록 불러오기\n\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE'; // 팔로우 하는 액션\n\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE'; // 중요한 액션!!!!! 리듀서의 단점때문에 만들어진 액션\n\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME'; // 실제 액션\n\nexport const loginAction = {\n  type: LOG_IN_REQUEST\n};\nexport const logoutAction = {\n  type: LOG_OUT_REQUEST\n};\nexport const signUpAction = data => {\n  return {\n    type: SIGN_UP_REQUEST,\n    data: data\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoadng: true\n        });\n      }\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoadng: false,\n          isLoggedIn: true,\n          me: dummyUser\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoadng: false,\n          isLoggedIn: false\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/project/nodebird/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","initialState","isLoggedIn","isLoggingOut","isLoggingIn","logInErrorReason","isSignedUp","isSigningUp","signUpErrorReason","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","loginAction","type","logoutAction","signUpAction","data","reducer","state","action","isLoadng","user","signUpData"],"mappings":"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","sourcesContent":["// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\r\n\r\nconst dummyUser = {\r\n    nickname : 'JINNE',\r\n    Post : [],\r\n    Followings : [],\r\n    Followers : [],\r\n}\r\n\r\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다.\r\nexport const initialState = {\r\n    isLoggedIn : false, //로그인 여부\r\n    isLoggingOut : false, //로그아웃 시도중\r\n    isLoggingIn : false, //로그인 시도중\r\n    logInErrorReason : '', //로그인 에러 사유\r\n    isSignedUp : false, //회원가입 성공\r\n    isSigningUp : false, //회원가입 시도중\r\n    signUpErrorReason : '', //회원가입 실패 사유\r\n    me : null, //내 정보\r\n    followingList : [], //팔로잉 리스트\r\n    followerList : [], //팔로워 리스트\r\n    userInfo : null,\r\n};\r\n// 여기까지 store\r\n\r\nexport const SIGN_UP_REQUEST = 'SIGN_UP_REQUEST';\r\nexport const SIGN_UP_SUCCESS = 'SIGN_UP_SUCCESS';\r\nexport const SIGN_UP_FAILURE = 'SIGN_UP_FAILURE';\r\n\r\nexport const LOG_IN_REQUEST = 'LOG_IN_REQUEST'; //액션의 이름\r\nexport const LOG_IN_SUCCESS = 'LOG_IN_SUCCESS';\r\nexport const LOG_IN_FAILURE = 'LOG_IN_FAILURE';\r\n\r\nexport const LOAD_USER_REQUEST = 'LOAD_USER_REQUEST';\r\nexport const LOAD_USER_SUCCESS = 'LOAD_USER_SUCCESS';\r\nexport const LOAD_USER_FAILURE = 'LOAD_USER_FAILURE';\r\n\r\nexport const LOG_OUT_REQUEST = 'LOG_OUT_REQUEST';\r\nexport const LOG_OUT_SUCCESS = 'LOG_OUT_SUCCESS';\r\nexport const LOG_OUT_FAILURE = 'LOG_OUT_FAILURE';\r\n\r\n// 팔로워, 팔로잉 목록 불러오기\r\nexport const LOAD_FOLLOW_REQUEST = 'LOAD_FOLLOW_REQUEST';\r\nexport const LOAD_FOLLOW_SUCCESS = 'LOAD_FOLLOW_SUCCESS';\r\nexport const LOAD_FOLLOW_FAILURE = 'LOAD_FOLLOW_FAILURE';\r\n\r\n// 팔로우 하는 액션\r\nexport const FOLLOW_USER_REQUEST = 'FOLLOW_USER_REQUEST';\r\nexport const FOLLOW_USER_SUCCESS = 'FOLLOW_USER_SUCCESS';\r\nexport const FOLLOW_USER_FAILURE = 'FOLLOW_USER_FAILURE';\r\n\r\nexport const UNFOLLOW_USER_REQUEST = 'UNFOLLOW_USER_REQUEST';\r\nexport const UNFOLLOW_USER_SUCCESS = 'UNFOLLOW_USER_SUCCESS';\r\nexport const UNFOLLOW_USER_FAILURE = 'UNFOLLOW_USER_FAILURE';\r\n\r\nexport const REMOVE_FOLLOWER_REQUEST = 'REMOVE_FOLLOWER_REQUEST';\r\nexport const REMOVE_FOLLOWER_SUCCESS = 'REMOVE_FOLLOWER_SUCCESS';\r\nexport const REMOVE_FOLLOWER_FAILURE = 'REMOVE_FOLLOWER_FAILURE';\r\n\r\n// 중요한 액션!!!!! 리듀서의 단점때문에 만들어진 액션\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\n\r\n// 실제 액션\r\nexport const loginAction = {\r\n    type : LOG_IN_REQUEST,\r\n};\r\n\r\nexport const logoutAction = {\r\n    type : LOG_OUT_REQUEST,\r\n}\r\n\r\nexport const signUpAction = (data) => {\r\n    return {\r\n        type : SIGN_UP_REQUEST,\r\n        data : data,\r\n    }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoadng : true,\r\n            };\r\n        }\r\n        case LOG_IN_SUCCESS : {\r\n            return {\r\n                ...state,\r\n                isLoadng : false,\r\n                isLoggedIn : true,\r\n                me : dummyUser,\r\n            }\r\n        }\r\n        case LOG_IN_FAILURE : {\r\n            return {\r\n                ...state,\r\n                isLoadng : false,\r\n                isLoggedIn : false,\r\n            }\r\n        }\r\n        case LOG_OUT_REQUEST : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : false,\r\n                user : null,\r\n            }\r\n        }\r\n        case SIGN_UP_REQUEST : {\r\n            return {\r\n                ...state,\r\n                signUpData : action.data,\r\n            };\r\n        }\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}