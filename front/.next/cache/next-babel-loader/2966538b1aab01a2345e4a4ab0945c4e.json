{"ast":null,"code":"var _jsxFileName = \"C:\\\\project\\\\nodebird\\\\front\\\\components\\\\PostCard.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST } from '../reducers/post';\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      commentFormOpened = _useState[0],\n      setCommentFormOpened = _useState[1];\n\n  var _useState2 = useState(''),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    // 펼쳐져있으면 닫고 닫혀있으면 펼치고\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENT_REQUEST,\n        data: {\n          postId: post.id\n        }\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(Card, {\n    style: {\n      margin: '40px 0 0'\n    },\n    key: +post.createdAT,\n    cover: post.img && __jsx(\"img\", {\n      alt: \"example\",\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }),\n    actions: [__jsx(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }), __jsx(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    })],\n    extra: __jsx(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60\n      },\n      __self: this\n    }, \"follow\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, __jsx(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, __jsx(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  })), __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"\\uC090\\uC57D\")), __jsx(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" reply\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return __jsx(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, __jsx(Comment, {\n        author: item.User.nickname // avatar = {<Link href = {{ pathname : '/user', query : { id : item.User.id } }} as = {`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\n        ,\n        avatar: __jsx(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85\n          },\n          __self: this\n        }, item.User.nickname[0]),\n        content: item.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAT: PropTypes.string\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/project/nodebird/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","PropTypes","Card","Icon","Button","Avatar","Form","Input","List","Comment","useSelector","useDispatch","ADD_COMMENT_REQUEST","LOAD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","prev","type","data","postId","id","onSubmitComment","e","preventDefault","alert","onChangeCommentText","target","value","margin","createdAT","img","User","nickname","content","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useState, useCallback, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Card, Icon, Button, Avatar, Form, Input, List, Comment } from 'antd';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENT_REQUEST } from '../reducers/post';\r\n\r\nconst PostCard = ({ post }) => {\r\n    const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n    const [commentText, setCommentText] = useState('');\r\n    const { me } = useSelector(state => state.user);\r\n    const { commentAdded, isAddingComment } = useSelector(state => state.post);\r\n    const dispatch = useDispatch();\r\n\r\n    const onToggleComment = useCallback(() => {\r\n        // 펼쳐져있으면 닫고 닫혀있으면 펼치고\r\n        setCommentFormOpened(prev => !prev);\r\n        if (!commentFormOpened) {\r\n            dispatch({\r\n                type : LOAD_COMMENT_REQUEST,\r\n                data : {\r\n                    postId : post.id,\r\n                }\r\n            });\r\n        }\r\n    }, []);\r\n\r\n    const onSubmitComment = useCallback((e) => {\r\n        e.preventDefault();\r\n        if (!me) {\r\n            return alert('로그인이 필요합니다');\r\n        }\r\n        return dispatch({\r\n            type : ADD_COMMENT_REQUEST,\r\n            data : {\r\n                postId : post.id,\r\n            },\r\n        });\r\n    }, [me && me.id, commentText]);\r\n\r\n    useEffect(() => {\r\n        setCommentText('');\r\n    }, [commentAdded === true]);\r\n\r\n    const onChangeCommentText = useCallback((e) => {\r\n        setCommentText(e.target.value);\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            <Card\r\n                style = {{margin : '40px 0 0'}}\r\n                key = {+post.createdAT}\r\n                cover = {post.img && <img alt=\"example\" src={post.img}/>}\r\n                actions = {[\r\n                    <Icon type=\"retweet\" key=\"retweet\"/>,\r\n                    <Icon type=\"heart\" key=\"heart\"/>,\r\n                    <Icon type=\"message\" key=\"message\" onClick={onToggleComment}/>,\r\n                    <Icon type=\"ellipsis\" key=\"ellipsis\"/>\r\n                ]}\r\n                extra = {<Button>follow</Button>}\r\n            >\r\n            <Card.Meta\r\n                avatar = {<Avatar>{post.User.nickname[0]}</Avatar>}\r\n                title = {post.User.nickname}\r\n                description = {post.content}\r\n            />\r\n            </Card>\r\n            {commentFormOpened && (\r\n                <>\r\n                    <Form onSubmit={onSubmitComment}>\r\n                        <Form.Item>\r\n                            <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\r\n                        </Form.Item>\r\n                        <Button type=\"primary\" htmlType=\"submit\">삐약</Button>\r\n                    </Form>\r\n                    <List\r\n                        header={`${post.Comments ? post.Comments.length : 0} reply`}\r\n                        itemLayout = \"horizontal\"\r\n                        dataSource = {post.Comments || []}\r\n                        renderItem = {item => (\r\n                            <li>\r\n                                <Comment\r\n                                    author = {item.User.nickname}\r\n                                    // avatar = {<Link href = {{ pathname : '/user', query : { id : item.User.id } }} as = {`/user/${item.User.id}`}><a><Avatar>{item.User.nickname[0]}</Avatar></a></Link>}\r\n                                    avatar = {<Avatar>{item.User.nickname[0]}</Avatar>}\r\n                                    content = {item.content}\r\n                                />\r\n                            </li>\r\n                        )}\r\n                    />\r\n                </>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\nPostCard.propTypes = {\r\n    post : PropTypes.shape({\r\n        User : PropTypes.object,\r\n        content : PropTypes.string,\r\n        img : PropTypes.string,\r\n        createdAT : PropTypes.string,\r\n    }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}