{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\nconst dummyUser = {\n  nickname: 'JINNE',\n  Post: [],\n  Followings: [],\n  Followers: []\n};\nexport const initialState = {\n  isLoggedIn: false,\n  user: null,\n  signUpData: {}\n};\nexport const LOG_IN = 'LOG_IN'; //액션의 이름\n\nexport const LOG_OUT = 'LOG_OUT';\nexport const SIGN_UP = 'SIGN_UP'; // 실제 액션\n\nexport const loginAction = {\n  type: LOG_IN\n};\nexport const logoutAction = {\n  type: LOG_OUT\n};\nexport const signUpAction = data => {\n  return {\n    type: SIGN_UP,\n    data: data\n  };\n};\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case LOG_IN:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          user: dummyUser\n        });\n      }\n\n    case LOG_OUT:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          user: null\n        });\n      }\n\n    case SIGN_UP:\n      {\n        return _objectSpread({}, state, {\n          signUpData: action.data\n        });\n      }\n\n    default:\n      {\n        return _objectSpread({}, state);\n      }\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/project/nodebird/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","initialState","isLoggedIn","user","signUpData","LOG_IN","LOG_OUT","SIGN_UP","loginAction","type","logoutAction","signUpAction","data","reducer","state","action"],"mappings":";;;;;;AAAA;AAEA,MAAMA,SAAS,GAAG;AACdC,EAAAA,QAAQ,EAAG,OADG;AAEdC,EAAAA,IAAI,EAAG,EAFO;AAGdC,EAAAA,UAAU,EAAG,EAHC;AAIdC,EAAAA,SAAS,EAAG;AAJE,CAAlB;AAOA,OAAO,MAAMC,YAAY,GAAG;AACxBC,EAAAA,UAAU,EAAG,KADW;AAExBC,EAAAA,IAAI,EAAG,IAFiB;AAGxBC,EAAAA,UAAU,EAAG;AAHW,CAArB;AAMP,OAAO,MAAMC,MAAM,GAAG,QAAf,C,CAAyB;;AAChC,OAAO,MAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB,C,CAEP;;AACA,OAAO,MAAMC,WAAW,GAAG;AACvBC,EAAAA,IAAI,EAAGJ;AADgB,CAApB;AAIP,OAAO,MAAMK,YAAY,GAAG;AACxBD,EAAAA,IAAI,EAAGH;AADiB,CAArB;AAIP,OAAO,MAAMK,YAAY,GAAIC,IAAD,IAAU;AAClC,SAAO;AACHH,IAAAA,IAAI,EAAGF,OADJ;AAEHK,IAAAA,IAAI,EAAGA;AAFJ,GAAP;AAIH,CALM;;AAOP,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGb,YAAT,EAAuBc,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACN,IAAf;AACI,SAAKJ,MAAL;AAAc;AACV,iCACOS,KADP;AAEIZ,UAAAA,UAAU,EAAG,IAFjB;AAGIC,UAAAA,IAAI,EAAGP;AAHX;AAKH;;AACD,SAAKU,OAAL;AAAe;AACX,iCACOQ,KADP;AAEIZ,UAAAA,UAAU,EAAG,KAFjB;AAGIC,UAAAA,IAAI,EAAG;AAHX;AAKH;;AACD,SAAKI,OAAL;AAAe;AACX,iCACOO,KADP;AAEIV,UAAAA,UAAU,EAAGW,MAAM,CAACH;AAFxB;AAIH;;AACD;AAAU;AACN,iCACOE,KADP;AAGH;AAzBL;AA2BH,CA5BD;;AA8BA,eAAeD,OAAf","sourcesContent":["// 유저 정보들만 담고 있는 sotre 안에 초기값을 넣어준다. 이게 초기 state\r\n\r\nconst dummyUser = {\r\n    nickname : 'JINNE',\r\n    Post : [],\r\n    Followings : [],\r\n    Followers : [],\r\n}\r\n\r\nexport const initialState = {\r\n    isLoggedIn : false,\r\n    user : null,\r\n    signUpData : {},\r\n};\r\n\r\nexport const LOG_IN = 'LOG_IN'; //액션의 이름\r\nexport const LOG_OUT = 'LOG_OUT';\r\nexport const SIGN_UP = 'SIGN_UP';\r\n\r\n// 실제 액션\r\nexport const loginAction = {\r\n    type : LOG_IN,\r\n};\r\n\r\nexport const logoutAction = {\r\n    type : LOG_OUT,\r\n}\r\n\r\nexport const signUpAction = (data) => {\r\n    return {\r\n        type : SIGN_UP,\r\n        data : data,\r\n    }\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case LOG_IN : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : true,\r\n                user : dummyUser,\r\n            };\r\n        }\r\n        case LOG_OUT : {\r\n            return {\r\n                ...state,\r\n                isLoggedIn : false,\r\n                user : null,\r\n            }\r\n        }\r\n        case SIGN_UP : {\r\n            return {\r\n                ...state,\r\n                signUpData : action.data,\r\n            };\r\n        }\r\n        default : {\r\n            return {\r\n                ...state,\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}